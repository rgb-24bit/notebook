#+TITLE:      执行查询

* 目录                                                    :TOC_4_gh:noexport:
- [[#联表查询][联表查询]]
- [[#footnotes][Footnotes]]

* 联表查询
  联表查询通常指需要执行 JOIN 语句的查询，执行时首先需要在多个表中选择驱动表（第一个被处理的表），选择原则为：
  #+begin_quote
  在对最终结果集没影响的前提下，优先选择结果集最少的那张表作为驱动表。
  #+end_quote

  一般来说，LEFT JOIN 一般以左表为驱动表（RIGHT JOIN一般则是右表 ），INNER JOIN 一般以结果集少的表为驱动表，
  也可以选择使用 Explain 查看执行计划来判断驱动表，其结果的第一张表即是驱动表。

  PS：Explain 结果不完全准确，但大多数时候是适用的。

  选择好驱动表后，MySQL 就需要在多张表中取出需要的数据，联表算法是是基于嵌套循环算法（nested-loop algorithm）[fn:1]而衍生出来的一系列算法，
  根据不同条件而选用不同的算法：
  #+begin_example
    在使用索引关联的情况下，有 Index Nested-Loop join 和 Batched Key Access join 两种算法;
    在未使用索引关联的情况下，有 Simple Nested-Loop join 和 Block Nested-Loop join 两种算法;　　
  #+end_example

  算法细节可以参考博文 [[https://www.cnblogs.com/youzhibing/p/12004986.html#autoid-2-3-0][神奇的 SQL 之 联表细节 → MySQL JOIN 的执行过程（一） - 青石路 - 博客园]]，简单总结的话就是：
  + 没有索引就走全表扫描，筛选出驱动表的数据后和后面的表一行一行比对
  + 有索引就根据索引进行匹配

  当然，在实际的使用中，在数据量较大的时候其实是不推荐使用 JOIN 语句的，数据库通常是一个带有中心化特征的服务，如果由数据库来执行大量数据的筛选，
  那么，这对数据库的资源必然是极大的占用，相对的，数据库资源常常是较为缺少的，而服务本身资源通常又有所盈余。

  让数据库进行基本的数据查询，由服务完成后续的数据关联，是一种可行的操作。
  
* Footnotes

[fn:1] 《高性能 MySQL 第三版》P214 有相关介绍
