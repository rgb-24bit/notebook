#+TITLE:      字符编码

* 目录                                                    :TOC_4_gh:noexport:
- [[#unicode-码点][Unicode 码点]]
- [[#可结合字符][可结合字符]]
- [[#不可见字符-u2061][不可见字符 \u2061]]
- [[#字符类型][字符类型]]
- [[#错误编码出现原因][错误编码出现原因]]
- [[#单字节字符集][单字节字符集]]
- [[#字符编码的兼容情况][字符编码的兼容情况]]
- [[#编码字符集和字符编码表][编码字符集和字符编码表]]

* Unicode 码点
  在 ~Python3~ 中可以用如下几个方式获取码点：
  #+BEGIN_SRC python
    In [1]: ascii('字符串')
    Out[1]: "'\\u5b57\\u7b26\\u4e32'"

    In [2]: ord('字')
    Out[2]: 23383

    In [3]: '字符串'.encode('unicode_escape')
    Out[3]: b'\\u5b57\\u7b26\\u4e32'
  #+END_SRC

* 可结合字符
  一些 ~Unicode~ 字符会和紧挨着的字符结合在一起显示，这样一来，一个显示一样的字符就可能存在两种编码：
  1. 本身的编码
  2. 于可结合字符结合得到的字符编码

  使用 ~Python~ 可以将第一种情况转换为第二种：
  #+BEGIN_SRC python
    >>> import unicodedata
    >>> import sys
    >>> cmb_chrs = dict.fromkeys(c for c in range(sys.maxunicode) if unicodedata.combining(chr(c)))
    >>> a = 'pýtĥöñ is awesome\n'
    >>> b = unicodedata.normalize('NFD', a)
    >>> b
    'pýtĥöñ is awesome\n'
    >>> b.translate(cmb_chrs)
    'python is awesome\n'

    >>> list(a)
    ['p', 'ý', 't', 'ĥ', 'ö', 'ñ', ' ', 'i', 's', ' ', 'a', 'w', 'e', 's', 'o', 'm', 'e', '\n']
    >>> list(b)
    ['p', 'y', '́', 't', 'h', '̂', 'o', '̈', 'n', '̃', ' ', 'i', 's', ' ', 'a', 'w', 'e', 's', 'o', 'm', 'e', '\n']
  #+END_SRC

* 不可见字符 \u2061
  可以利用这个字符来防止敏感词被屏蔽，可以写个 ~JavaScript~ 的函数：
  #+BEGIN_SRC javascript
    f = (s) => Array.from(s).join('\u2061')
  #+END_SRC

* 字符类型
  + 单字节字符 - 即单个字节的字符， C 语言中就是 char
  + 多字节字符 - 即多个字节的字符， 比如往 char 数组中存放汉字时，每个汉字占据的字节数为 2
  + 宽字符 - 即固定为 2 字节宽度的字符，包括 ASCII 码字符，在多字节字符中 ASCII 为单个字节
  + Unicode - 宽字符的实现

* 错误编码出现原因
  #+begin_src python
    from codecs import encode, decode

    def convert(string, *encodings):
        for i in range(len(encodings) - 1):
            string = decode(encode(string, encodings[i]), encodings[i + 1], errors='ignore')
        print(' -> '.join(encodings), string)

    string = '测试字符串'

    convert(string, 'utf-8', 'gbk')
    convert(string, 'gbk', 'utf-8')
    convert(string, 'utf-8', 'iso8859-1')
    convert(string, 'gbk', 'iso8859-1')
    convert(string, 'utf-8', 'gbk', 'utf-8')
    convert(string, 'gbk', 'utf-8', 'gbk')
  #+end_src

  详情的可以看图片：
  #+HTML: <img src="https://i.loli.net/2020/12/10/lqYETKpSVZ2jJw7.png">

* 单字节字符集
  单字节字符集如 ~latin-1~ 的一种使用：
  #+BEGIN_SRC python
    def convert_single(data, encoding='utf-8'):
        return data.encode(encoding).decode('latin-1')


    def convert_multi(data, encoding='utf-8'):
        return data.encode('latin-1').decode(encoding)
  #+END_SRC

  实际例子：
  #+BEGIN_SRC python
    In [1]: from charset import *

    In [2]: s = convert_single('单字节字符集abcdef')

    In [3]: s
    Out[3]: 'å\x8d\x95å\xad\x97è\x8a\x82å\xad\x97ç¬¦é\x9b\x86abcdef'

    In [4]: convert_multi(s)
    Out[4]: '单字节字符集abcdef'
  #+END_SRC

* 字符编码的兼容情况
  某种程度上来说，ASCII 和 ISO8859-1 是编码方式的同时也是字符集：
  #+HTML: <img src="https://i.loli.net/2020/01/04/O31gTpDZYVWUEaz.png">

* 编码字符集和字符编码表
  通常，字符到二进制表示的转换会经过：字符表 -> 编码字符集 -> 字符编码表三步：
  + 字符表：字符的集合，如英文字母表，阿拉伯数字表
  + 编码字符集（CCS：Coded Character Set）：为字符表中的每个字符指定一个编号（码点，Code Point），即得到编码字符集。常见有 ASCII 字符集、Unicode 字符集、GB2312 字符集、BIG5 字符集、 GB18030 字符集等
  + 字符编码表（CEF：Character Encoding Form）：编码字符集只定义了字符与码点的映射，并没有规定码点的字节表示方式。而字符编码表定义了码点的字节表示方式。
    其中，由于 1 个字节可以表示 256 个编号，足以容纳 ASCII 字符集，因此 ASCII 编码的规则很简单：直接将码点值用 uint8 表示即可。

  PS：在 MySQL 刚开发那会儿，Unicode 空间只有 2^16，因此其 utf8 编码最大只有 3 字节，会导致一些字符无法插入，应该将编码设置为 utf8mb4(utf8 most bytes 4) 才是真正的 utf8 编码。

