#+TITLE:      HTTP/HTTPS

* 目录                                                    :TOC_4_gh:noexport:
- [[#http][HTTP]]
  - [[#http-概述][HTTP 概述]]
  - [[#http-缓存][HTTP 缓存]]
  - [[#http-cookie][HTTP Cookie]]
  - [[#http-cros][HTTP CROS]]
  - [[#http-连接管理][HTTP 连接管理]]
  - [[#http-请求头和响应头][HTTP 请求头和响应头]]
  - [[#multipart][MultiPart]]
  - [[#断点续传][断点续传]]
  - [[#http-auth][HTTP Auth]]
- [[#https][HTTPS]]
  - [[#ssl-和-tls-协议][SSL 和 TLS 协议]]
  - [[#数字证书和数字签名][数字证书和数字签名]]
    - [[#生成方式][生成方式]]
    - [[#信任问题][信任问题]]
    - [[#参考链接][参考链接]]
- [[#hsts][HSTS]]
- [[#相关问题][相关问题]]
  - [[#http-header-大小写敏感吗][HTTP Header 大小写敏感吗]]
  - [[#http-协议中的无状态是什么意思][HTTP 协议中的无状态是什么意思]]
  - [[#get-和-post-之间的区别][GET 和 POST 之间的区别]]
  - [[#状态码-200201-的使用][状态码 200/201 的使用]]
  - [[#名称相同的-cookie-的处理规则][名称相同的 Cookie 的处理规则]]
  - [[#服务端通过-set-cookie-头清除-cookie][服务端通过 Set-Cookie 头清除 Cookie]]

* HTTP
** HTTP 概述
   HTTP 是面向 C/S 架构的协议，客户端通过用户代理发起请求，其中，用户代理通常是浏览器，但也可以是其他东西，比如爬虫。

   HTTP 协议的基本性质为：
   1. 简单的 - HTTP 报文能够被人读懂，还允许简单测试，降低了门槛，对新人很友好
   2. 可扩展 - HTTP 协议允许通过 HTTP Headers 对 HTTP 协议进行扩展
   3. 无状态 - 在同一个连接中，两个执行成功的请求之间是没有关系的，但是可以使用 Cookies 可以创建有状态的会话

   HTTP 良好的扩展性使得越来越多的 Web 功能归其控制，主要有：
   + 缓存 - 资源如何缓存可以通过 HTTP 来控制
   + 访问控制 CORS - HTTP 可以通过修改头部来开放和 CORS 有关限制
   + 认证 - 可以使用 HTTP 头如 Authenticate 或 Cookie 来进行认证控制

   参考：
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview][HTTP 概述 - HTTP | MDN]]

** HTTP 缓存
   HTTP 通过请求的方法和请求的资源 URI 来进行缓存，通常只有 GET 方法的响应能够被缓存，主要有：
   + 响应状态码为 200 的 GET 请求
   + 响应状态码为 301 的永久重定向
   + 响应状态码为 404 的错误响应
   + 响应状态码为 206 的不完全响应

   可以通过一些 HTTP Header 对缓存行为进行控制，可以根据是否需要重新向服务器发起请求来将缓存分为 *强制缓存* 和 *对比缓存* 两类：
   + 强制缓存 - 存在缓存时就直接使用缓存数据，不存在时才请求服务器
   + 对比缓存 - 存在缓存时需要将缓存的一些信息发送到服务器来判断缓存是否有效，有效时服务器返回状态码 304，否则返回相应的数据

   强制缓存和对比缓存都需要使用 ~Cache-Control~ 头，该头常见的取值有：
   |-------------+--------------------------------+-----------------------------------------|
   | 取值        | 含义                           | 备注                                    |
   |-------------+--------------------------------+-----------------------------------------|
   | private     | 只有客户端可以缓存             |                                         |
   | public      | 客户端和代理服务器都可缓存     | 前端可以认为 public 和 private 是一样的 |
   | max-age=xxx | 缓存的内容将在 xxx 秒后失效    |                                         |
   | no-cache    | 需要使用对比缓存来验证缓存数据 |                                         |
   | no-store    | 所有内容都不会缓存             |                                         |
   |-------------+--------------------------------+-----------------------------------------|

   对于强制缓存来说，可以通过只指定 ~max-age~ 取值的方式来实现，这时缓存类型默认为 ~private~ 的，存在缓存时就不会发起请求。

   对于对比缓存来说，除了通过 ~Cache-Control~ 头指定缓存类型以外，还需要通过一些其他头部传递 *缓存标识* 来判断缓存是否已经失效：
   + ~Last-Modified/If-Modified-Since~ - 服务器在响应请求时，可以通过 ~Last-Modified~ 告诉浏览器资源的最后修改时间，然后客户端通过 ~If-Modified-Since~ 头携带该值，
     服务器收到请求后就根据该时间判断资源是否存在变动，无变动就返回 304 状态码，变动就返回新的数据
   + ~Etag/If-None-Match~ - 和 ~Last-Modified/If-Modified-Since~ 的方式类似，但是优先级更高，服务器通过 ~Etag~ 唯一标识资源，收到客户端的请求时，便可以根据该标识判断资源是否存在

   理论上来讲，当一个资源被缓存存储后，该资源应该可以被永久存储在缓存中。由于缓存只有有限的空间用于存储资源副本，所以缓存会定期地将一些副本删除，这个过程叫做缓存驱逐。

   另一方面，当服务器上面的资源进行了更新，那么缓存中的对应资源也应该被更新，由于 HTTP 是 C/S 模式的协议，服务器更新一个资源时，不可能直接通知客户端更新缓存，
   所以双方必须为该资源约定一个过期时间，在该过期时间之前，该资源（缓存副本）就是 *新鲜* 的，当 *过了过期时间* 后，该资源（缓存副本）则变为 *陈旧* 的。

   驱逐算法用于将陈旧的资源替换为新鲜的，注意，一个陈旧的资源是不会直接被清除或忽略的，当客户端发起一个请求时，缓存检索到已有一个对应的陈旧资源，则缓存会先将此请求附加一个 ~If-None-Match~ 头，
   然后发给目标服务器，以此来检查该资源副本是否是依然还是算新鲜的，若服务器返回了 304 (Not Modified)，则表示此资源副本是新鲜的，这样一来，可以节省一些带宽。
   若服务器通过 ~If-None-Match~ 或 ~If-Modified-Since~ 判断后发现已过期，那么会带有该资源的实体内容返回。

   PS: 在没有 Cache-Control 头的情况下浏览器貌似不会进行缓存……

   参考：
   + [[https://developer.mozilla.org/en-US/docs/Glossary/Cacheable][Cacheable - MDN Web Docs Glossary: Definitions of Web-related terms | MDN]]
   + [[https://www.cnblogs.com/chenqf/p/6386163.html][彻底弄懂 HTTP 缓存机制及原理 - 云中桥 - 博客园]]
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ][HTTP 缓存 - HTTP | MDN]]

** HTTP Cookie
   使用 HTTP 协议时，常常会通过 Cookie 来使的基于无状态的 HTTP 协议能够记录稳定的状态信息，Cookie 可以通过 ~Set-Cookie~ 创建：
   + 默认情况下，不指定 ~Expires~ 或 ~Max-Age~ 时创建的 Cookie 为会话期 Cookie，关闭页面后就会失效

   可以通过 Domain 和 Path 指定 Cookie 的作用域，在没有设置 Secure 属性时，在 http schema 下设置的 cookie 在 https 下也可以访问，
   反之亦然。

   参考：
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies][HTTP cookies - HTTP | MDN]]

** HTTP CROS
   在学习 CROS 之前应该先学习的是浏览器的同源策略及其作用，其中同源指的是：域名、协议、端口相同。浏览器会禁止非同源的 DOM 访问和 XHR 请求。

   如果没有 DOM 同源策略，也就是说不同域的 iframe 之间可以相互访问，那么黑客可以这样进行攻击：
   1. 做一个假网站，里面用 iframe 嵌套一个银行网站 ~http://mybank.com~
   2. 把 iframe 宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别
   3. 这时如果用户输入账号密码，我们的主网站可以跨域访问到 ~http://mybank.com~ 的 dom 节点，就可以拿到用户的账户密码了

   如果没有 XMLHttpRequest 同源策略，那么黑客可以进行 CSRF（跨站请求伪造） 攻击：
   1. 用户登录了自己的银行页面 ~http://mybank.com~ 后网站向用户的 cookie 中添加用户标识
   2. 用户浏览了恶意页面 ~http://evil.com~ 执行了页面中的恶意 AJAX 请求代码
   3. ~http://evil.com~ 向 ~http://mybank.com~ 发起 AJAX HTTP 请求，请求会默认把 ~http://mybank.com~ 对应 cookie 也同时发送过去
   4. 银行页面从发送的 cookie 中提取用户标识，验证用户无误，response 中返回请求数据。此时数据就泄露了
   5. 而且由于 Ajax 在后台执行，用户无法感知这一过程

   虽然同源策略能够让我们更加安全的上网，但是在实际中，有时候我们需要突破这样的限制，此时可以使用 CROS 来实现。

   CORS（Cross-origin resource sharing，跨域资源共享）是一个 W3C 标准，定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。CORS 背后的基本思想，
   就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。

   浏览器将 CORS 请求分成简单请求和非简单请求两类：
   + 简单请求：
     1. 简单需要在请求中需要附加一个额外的 Origin 头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部信息来决定是否给予响应
     2. 如果服务器认为这个请求可以接受，就在 Access-Control-Allow-Origin 头部中回发相同的源信息（如果是公共资源，可以回发 * ）
     3. 没有这个头部或者有这个头部但源信息不匹配，浏览器就会驳回请求
   + 非简单请求：
     1. 浏览器在发送真正的非简单请求之前，会先发送一个 ~Preflight~ 请求给服务器，这种请求使用 OPTIONS 方法，发送指定头部到服务器
     2. 服务器根据请求的头部决定是否允许这种类型的请求，并在响应中发送指定头部到客户端
     3. 一旦服务器通过 Preflight 请求允许该请求之后，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样了

   参考：
   + [[https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-3][浏览器同源策略及跨域的解决方法 - 掘金]]
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS][HTTP访问控制（CORS） - HTTP | MDN]]

** HTTP 连接管理
   在 HTTP/1.0 中默认使用短连接。也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。

   这样是极为耗费资源的，因此，从 HTTP/1.1 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头加入这行代码：
   #+BEGIN_EXAMPLE
     Connection: keep-alive
   #+END_EXAMPLE

   在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，
   会继续使用这一条已经建立的连接。Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件中设定这个时间。

   客户端也可以通过 ~Connection~ 头的 ~timeout~ 参数设置超时时间。

   参考：
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Connection_management_in_HTTP_1.x][HTTP/1.x 的连接管理 - HTTP | MDN]]
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive][Keep-Alive - HTTP | MDN]]

** HTTP 请求头和响应头
   HTTP 消息头支持自定义，自定义的专用消息头一般会添加 ~X-~ 前缀，常用的 HTTP 请求头和响应头可以参考：
   + [[https://itbilu.com/other/relate/EJ3fKUwUx.html][HTTP 消息头 － 常用的 HTTP 请求头与响应头 - IT 笔录]]

   响应头中包含相应的状态码，大致的状态码划分为：
   |--------+---------------+----------------------------|
   | 状态码 | 类别          | 原因短语                   |
   |--------+---------------+----------------------------|
   |    1xx | Informational | 接收的请求正在处理         |
   |    2xx | Success       | 请求正常处理完毕           |
   |    3xx | Redirection   | 需要进行附加操作以完成请求 |
   |    4xx | Client Error  | 服务器无法处理请求         |
   |    5xx | Server Error  | 服务器处理请求错误         |
   |--------+---------------+----------------------------|

   常用状态码：
   + 200 - 请求成功
   + 201 - 资源已创建
   + 301 - 永久重定向
   + 302 - 临时重定向
   + 401 - 未授权
   + 403 - 无权限
   + 404 - 资源不存在
   + 500 - 服务器内部错误

** MultiPart
   MultiPart 类型的请求常用于文件的上传，是一种基于 POST 请求的请求格式。对于 MultiPart 类型的请求，需要指定 ~Content-Type~ 为如下格式：
   #+begin_example
     Content-Type: multipart/form-data; boundary=MjkyMTI5NjktMUVCNy00NENELUFFMTctREQ1Q0YzREM3NUY5Cg
   #+end_example
   
   请求体中的每一部分以 ~--boundary~ 开始，最后一个部分以 ~--boundary--~ 结束，每个部分需要通过 ~Content-Disposition~ 指定该部分对应的字段名称：
   #+begin_example
     Content-Disposition: form-data; name="user";
     Content-Disposition: form-data; name="user"; filename="hello.txt"
   #+end_example

   每个部分可以拥有自己的请求头，然后空一行跟请求体：
   #+begin_example
     POST /t2/upload.do HTTP/1.1
     User-Agent: SOHUWapRebot
     Accept-Language: zh-cn,zh;q=0.5
     Accept-Charset: GBK,utf-8;q=0.7,*;q=0.7
     Connection: keep-alive
     Content-Length: 60408
     Content-Type:multipart/form-data; boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC
     Host: w.sohu.com

     --ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC
     Content-Disposition: form-data; name="city"

     Santa colo
     --ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC
     Content-Disposition: form-data;name="desc"
     Content-Type: text/plain; charset=UTF-8
     Content-Transfer-Encoding: 8bit

     ...
     --ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC
     Content-Disposition: form-data;name="pic"; filename="photo.jpg"
     Content-Type: application/octet-stream
     Content-Transfer-Encoding: binary

     ... binary data of the jpg ...
     --ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--
   #+end_example

   参考：
   + [[https://stackoverflow.com/questions/16958448/what-is-http-multipart-request][What is http multipart request? - Stack Overflow]]
   + [[https://www.jianshu.com/p/29e38bcc8a1d][深入解析 multipart/form-data - 简书]]

** 断点续传
   断点续传利用的主要是 ~Range~ 这个请求头，通过一定的请求格式来获取想要的数据段：
   #+begin_example
     Range: <unit>=<range-start>-
     Range: <unit>=<range-start>-<range-end>
     Range: <unit>=<range-start>-<range-end>, <range-start>-<range-end>
     Range: <unit>=<range-start>-<range-end>, <range-start>-<range-end>, <range-start>-<range-end>
   #+end_example

   同时，根据响应头中的 ~Content-Length~ 获取数据的总长度，参考：
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range][Range - HTTP | MDN]]
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length][Content-Length - HTTP | MDN]]

** HTTP Auth
   HTTP Auth 本质上是利用公认的 Header 来完成客户端和服务端之间的认证，其中，服务端通过 WWW-Authenticate Header 来指定客户端应该使用的 Auth 方式，
   然后客户端通过 Authorization Header 携带相应的 Auth 信息，由服务端进行效验。

   而对于 Basic 和 Bearer 这样具体的实现方式来说，就是更进一步的话题了，某种程度上来说，虽然都还算是 HTTP Auth，但又自成一体。
   
   参考：
   + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication][HTTP 身份验证 - HTTP | MDN]]

* HTTPS
** SSL 和 TLS 协议
   + [[https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html][SSL/TLS 协议运行机制的概述 - 阮一峰的网络日志]]

** 数字证书和数字签名
   数字证书和数字签名的生成其实并不复杂，理解这两者中最复杂的反而是其中的信任问题，因此，在了解学习这两个东西的过程中，
   可以考虑将生成方式和信任问题分开来进行理解。
  
*** 生成方式
    数字签名的生成是很简单的，需要进行数字签名时，先通过 Hash 计算得到需要发送的信息的摘要，然后通过自己的私钥对摘要进行加密，得到的便是数字签名了。

    即：通过 *私钥* 对 *信息摘要* 进行加密后得到的便是 *数字签名*

    数字证书的生成同样很简单，需要生成数字证书时，签发机构通过自己的私钥对一些必要的基本信息进行加密（比如申请者的公钥），得到的结果就是数字证书了。

    即：通过签发机构的 *私钥* 对申请者的 *公钥* 和其他信息加密后得到的便是 *数字证书*

    然后，申请者在发送信息的时候便可以带上数字证书证明自己的身份，带上数字签名证明信息没有被篡改。

*** 信任问题
    数字签名用来证明信息内容的完整性，已经，信息没有被篡改，这依赖于 Hash 算法，但是 Hash 算法只能保证信息时完整的，不能保证信息没有被篡改。

    因此，需要通过私钥对信息的摘要进行加密，这样一来，即使中间人能够拿到信息，也不能生成可以被公钥界面的数字签名。但是，如果接收者拿到的公钥也是假的呢？

    于是乎，数字证书出现了，通过受信任的第三方机构的公钥和该机构签发的数字证书，我们能够保证，只要拿到的数字证书时没有问题的，那么，解密数字证书得到的公钥就没有问题，
    那么，通过解密得到的公钥效验数字签名就没有问题了。

    说到底，就是一个信任链的问题，我信任数字证书的签发机构，签发机构信任信息的发送者，于是，我也信任信息的发送者。

*** 参考链接
    + [[https://www.zhihu.com/question/47232448][怎么保证「CA 的公钥」是真实的？ - 知乎]]
    + [[http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html][数字签名是什么？ - 阮一峰的网络日志]]
    + [[http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html][图解SSL/TLS协议 - 阮一峰的网络日志]]
    + [[https://rootdeep.github.io/posts/ssl/#%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6][理解数字证书及制作过程]]

* HSTS
  HTTP Strict Transport Security（通常简称为HSTS）是一个安全功能，它告诉浏览器只能通过 HTTPS 访问当前资源，而不是 HTTP。

  参考：
  + [[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/HTTP_Strict_Transport_Security][HTTP Strict Transport Security - HTTP | MDN]]
  + [[https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/][HTTP Strict Transport Security (HSTS) and NGINX - NGINX]]

  和 301 之间的区别：
  + HSTS 服务端通过 response header 的方式告诉客户端应该使用 HTTPS 访问网站，重定向由客户端完成，服务端依然接受 HTTP 流量
  + 强制 HTTPS 301 跳转，服务端拒绝 HTTP 流量，并将 HTTP 流量通过 301 状态码重定向到对应 HTTPS 路径

  参考：
  + [[https://security.stackexchange.com/questions/129273/whats-the-difference-between-using-hsts-and-doing-a-301-redirection][tls - What's the difference between using HSTS and doing a 301 redirection? - Information Security Stack Exchange]]
  
* 相关问题
** HTTP Header 大小写敏感吗
   HTTP Header 大小写不敏感，参考：
   + [[https://stackoverflow.com/questions/5258977/are-http-headers-case-sensitive][Are HTTP headers case-sensitive? - Stack Overflow]]

** HTTP 协议中的无状态是什么意思
   HTTP 中每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况。

** GET 和 POST 之间的区别
   主要区别有：
   1. 语义上的区别，GET 是幂等的，而 POST 不是，参考：[[https://developer.mozilla.org/zh-CN/docs/Glossary/%E5%B9%82%E7%AD%89][幂等 - 术语表 | MDN]]
      #+BEGIN_QUOTE
      一个 HTTP 方法是幂等的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。
      #+END_QUOTE
   2. GET 在浏览器回退时是无害的，而 POST 会再次提交请求
   3. GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以
   4. GET 请求可以被浏览器 Cache，而 POST 一般不会
   5. GET 请求参数只能进行 URL 编码，而 POST 支持多种编码方式
   6. GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留
   7. GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有
   8. 对参数的数据类型，GET 只接受 ASCII 字符，非 ASCII 字符需要进行编码转换，而 POST 没有限制
   9. GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息
   10. GET 参数通过 URL 传递，POST 放在 Request body 中

   参考：
   + [[https://zhuanlan.zhihu.com/p/25028045][听说『99% 的人都理解错了 HTTP 中 GET 与 POST 的区别』？？ - 知乎]]
   + [[https://zhuanlan.zhihu.com/p/22536382][99% 的人都理解错了 HTTP 中 GET 与 POST 的区别 - 知乎]]
** 状态码 200/201 的使用
   在 RESTful 服务中，POST 请求成功后可以考虑返回这两个状态码中的一个，各自的含义为：
   + 200 when an object is created and returned
   + 201 when an object is created but only its reference is returned (such as an ID or a link)

   一般来说还是 200 要用的多一些吧……

** 名称相同的 Cookie 的处理规则
   在设置 Cookie 时，Domain 和 Path 属性可能使得一个请求匹配到多个名称相同的 Cookie，比如：
   #+begin_example
     Set-Cookie: value=1; path=/; domain=a.scripts.cmbuckley.co.uk; HttpOnly
     Set-Cookie: vakue=2; path=/; domain=scripts.cmbuckley.co.uk; HttpOnly
   #+end_example

   这种情况下，User Agent 应该按照下面的规则将所有匹配的 Cookie 排序上传：
   #+begin_quote
   2.  The user agent SHOULD sort the cookie-list in the following
       order:

       *  Cookies with longer paths are listed before cookies with
          shorter paths.

       *  Among cookies that have equal-length path fields, cookies with
          earlier creation-times are listed before cookies with later
          creation-times.
   #+end_quote

   此时，请求的 Cookie 可能就长这样，也就是说，同一个 Cookie 可能存在多个值：
   #+begin_example
     Cookie: value=2; value=1
   #+end_example

   而在服务端，又经常只会获取其中的一个值，这就可能会导致一些奇怪的问题的出现。

   参考：
   + [[https://tools.ietf.org/html/rfc6265#section-5.4][RFC 6265 - 5.4 The Cookie Header]]


** 服务端通过 Set-Cookie 头清除 Cookie
   #+begin_example
     Set-Cookie: token=deleted; path=/; expires=<Now>
   #+end_example

   参考：
   + [[https://stackoverflow.com/questions/5285940/correct-way-to-delete-cookies-server-side][http - Correct way to delete cookies server-side - Stack Overflow]]

