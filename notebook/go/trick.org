#+TITLE:      Go Trick

* 目录                                                    :TOC_4_gh:noexport:
- [[#类型转换][类型转换]]
- [[#uintptr--unsafepointer][uintptr & unsafe.Pointer]]
- [[#short-variable-declarations][Short variable declarations]]
- [[#匿名字段][匿名字段]]
- [[#type-switch][type switch]]
- [[#comparison-operators][Comparison operators]]
- [[#functional-options][Functional Options]]
- [[#错误处理][错误处理]]
- [[#类型系统][类型系统]]
- [[#byte--string][[]byte & string]]
- [[#listen-n-channels][listen N channels]]
- [[#footnotes][Footnotes]]

* 类型转换
  当两个结构体忽略 tag 后拥有相同的底层类型，那么就可以进行显示类型转换：
  #+begin_quote
  A non-constant value x can be converted to type T in any of these cases:
  + ignoring struct tags (see below), x's type and T have identical underlying types.
  + ignoring struct tags (see below), x's type and T are pointer types that are not defined types, and their pointer base types have identical underlying types.
  #+end_quote

  参考：
  + [[https://golang.org/ref/spec#Conversions][Conversions ¶]]
    
* uintptr & unsafe.Pointer
  Go 中的指针是不支持指针偏移运算的，也就是说，指针的值要么是固定的，要么通过取址操作给它一个新值。

  但是，我们可以通过将指针转换为 uintptr 来绕过这一限制。

  uintptr 是 Go 的内置类型，是能存储指针的整型，能够进行整数运算，此时，通过搭配 unsafe.Offsetof 我们就可以得到结构体某个字段的偏移地址，然后进行操作：
  #+begin_src go
    pb := (*int16)(unsafe.Pointer(uintptr(unsafe.Pointer(&x)) + unsafe.Offsetof(x.b)))
  #+end_src

  这里需要注意的是，不要试图引入一个 uintptr 类型的临时变量，因为有时候垃圾回收器会移动一些变量以降低内存碎片等问题。

  当一个变量被移动，所有的保存改变量旧地址的指针必须同时被更新为变量移动后的新地址。从垃圾收集器的视角来看，一个 unsafe.Pointer 是一个指向变量的指针，
  因此当变量被移动是对应的指针也必须被更新；但是 uintptr 类型的临时变量只是一个普通的数字，所以其值不应该被改变。

  也就是说，下面的代码存在安全隐患：
  #+begin_src go
    tmp := uintptr(unsafe.Pointer(&x)) + unsafe.Offsetof(x.b)
    pb := (*int16)(unsafe.Pointer(tmp))
  #+end_src

  参考：
  + [[https://www.cnblogs.com/sunsky303/p/11820500.html][你不知道的 Go unsafe.Pointer uintptr 原理和玩法 - sunsky303 - 博客园]]

* Short variable declarations
  在满足下列条件时，已被声明的变量 v 可出现在 := 声明中：
  + 本次声明与已声明的 v 处于同一作用域中（若 v 已在外层作用域中声明过，则此次声明会创建一个新的变量）
  + 在初始化中与其类型相应的值才能赋予 v，且
  + 在此次声明中至少另有一个变量是新声明的

* 匿名字段
  我们可以利用匿名字段的特性，定义一个接口并提供默认的实现，这时，只要其他结构体包含该匿名字段，那么，它就实现了该接口。

* type switch
  使用 type switch 的时候，可以通过如下方式避免再次进行类型断言：
  #+begin_src go
    switch v := i.(type) {
    case T:
        // here v has type T
    case S:
        // here v has type S
    default:
        // no match; here v has the same type as i
    }
  #+end_src

* Comparison operators
  在使用 struct{}{} 作为 context 的 key 的时候遇到的问题，两个包下面的 key 值被判相等了 QAQ

  原因：
  #+begin_quote
  + Interface values are comparable. Two interface values are equal if they have identical dynamic types and equal dynamic values or if both have value nil.
  + Struct values are comparable if all their fields are comparable. Two struct values are equal if their corresponding non-blank fields are equal.
  #+end_quote

  context 的 key 就被转换为 interface 存储，根据 [[file:go.org::*复合类型][复合类型]] 中的描述，当两个结构体不存在 private 字段，同时 public 字段相同时，他们的类型便是一样的。

  而 struct{}{}，不存在任何字段，因此，在任意地方，它们的类型都是一样的，值也是一样的。

  可以通过声明一个类型的方式避免这种情况：
  #+begin_src go
    type TA struct{}
    type TB struct{}
  #+end_src

  这里 TA 和 TB 是两个类型，同时，TA{} 和 TA{} 的值相等。

  参考：
  + [[https://en.wikipedia.org/wiki/Bottom_type][Bottom type - Wikipedia]]
  + [[https://golang.org/ref/spec#Comparison_operators][Comparison operators ¶]]
  + [[https://en.wikipedia.org/wiki/Unit_type][Unit type - Wikipedia]]
    
* Functional Options
  可以利用 Functional Options 的模式来配置对象：
  #+begin_src go
    type Option func(*Server)

    func Protocol(p string) Option {
        return func(s *Server) {
            s.Protocol = p
        }
    }
    func Timeout(timeout time.Duration) Option {
        return func(s *Server) {
            s.Timeout = timeout
        }
    }
    func MaxConns(maxconns int) Option {
        return func(s *Server) {
            s.MaxConns = maxconns
        }
    }
    func TLS(tls *tls.Config) Option {
        return func(s *Server) {
            s.TLS = tls
        }
    }

    func NewServer(addr string, port int, options ...func(*Server)) (*Server, error) {
      srv := Server{
        Addr:     addr,
        Port:     port,
        Protocol: "tcp",
        Timeout:  30 * time.Second,
        MaxConns: 1000,
        TLS:      nil,
      }
      for _, option := range options {
        option(&srv)
      }
      //...
      return &srv, nil
    }
  #+end_src

  参考：
  + [[https://coolshell.cn/articles/21146.html][Go 编程模式：Functional Options | 酷 壳 - CoolShell]]

* 错误处理
  Go 1.13 开始支持 error 之间的 wrap 和 unwrap，并提供了 errors.Is 和 errors.As 方法来辅助判断错误类型：
  #+begin_src go
    func (e *QueryError) Unwrap() error { return e.Err }

    // Similar to:
    //   if err == ErrNotFound { … }
    if errors.Is(err, ErrNotFound) {
        // something wasn't found
    }

    // Similar to:
    //   if e, ok := err.(*QueryError); ok { … }
    var e *QueryError
    // Note: *QueryError is the type of the error.
    if errors.As(err, &e) {
        // err is a *QueryError, and e is set to the error's value
    }
  #+end_src

  也可以通过 %w 方便进行 wrap：
  #+begin_src go
    if err != nil {
        // Return an error which unwraps to err.
        return fmt.Errorf("decompress %v: %w", name, err)
    }
  #+end_src

  但是在实际的使用中可能存在一些问题，比如当实际的 error 是一个 value 的时候，errors.As 很可能会误用：
  + [[https://github.com/golang/go/issues/34091][errors, cmd/vet: too easy to pass a pointer-to-pointer to `errors.As` when it should be a pointer-to-value · Issue #34091 · golang/go]]

  参考：
  + [[https://blog.golang.org/go1.13-errors][Working with Errors in Go 1.13 - The Go Blog]]

* 类型系统
  Go 中可以通过如下语法 *定义* 一个新的类型，这个过程被叫做类型定义，但需要注意区分类型别名的声明，类型定义和声明别名都是类型声明方式的一种，
  但是类型定义会影响到赋值、类型转换操作，而类型别名不会：
  #+begin_example
    TypeDecl = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
    TypeSpec = AliasDecl | TypeDef .
    TypeDef = identifier Type .
  #+end_example

  和类型定义相关的一个概念是命名类型和未命名类型：
  + 如果一个类型有一个名称，该名称必须是一个标识符，并且它的名称不是空白标识符 _，那么这种类型被称为命名类型。所有基本类型都是命名类型
  + 如果一个类型不能用一个纯粹的标识符来表示，那么这个类型就是一个未命名的类型。比如通过类型字面量表示的复合类型[fn:1]都是未命名的类型

  受到类型系统的影响，很多地方都需要对两个类型是否相同进行判断，判断规则为：
  + 两个定义类型之间必然是不同的，也就是通过类型定义定义的类型都是不一样的
  + 数组的元素类型和长度相同时两个数组类型相同
  + Slice 的元素类型相同相同时两个 Slice 类型相同
  + 结构体字段顺序、类型和 Tag 都相同是两个结构体类型相同，特殊的，对于字段的判断，不在同一个包下的为导出字段必然是不一样的，
    也就是说如果 A 类型和 B 类型不在同一个包下，且具有为导出字段，那么，就是它们的定义看上去一模一样，它们也不是相同的类型
  + 指针的基础类型一样是两个指针类型相同
  + 函数的参数返回值顺序、类型和数量相同时两个函数类型相同
  + 接口的方法集相同时两个接口类型相同，顺序无关。如果有未导出方法，且位于不同包，那么和结构体字段判断规则一样，两个接口必然是不一样的
  + Map 的 Key 和 Value 类型一样时两个 Map 类型一样
  + Channel 的元素类型和方向一样时两个 Channel 类型一样

  在这个复杂的类型系统下，赋值操作同样遵循一些规则，值 x 能够赋值给类型 T 的变量需要满足如下条件之一：
  + x 的类型和 T 一样
  + x 的类型 V 和 T 有相同的底层类型，同时两者中至少有一个未命名类型
  + T 是一个接口类型且 x 实现了 T 接口
  + x 是一个双向 Channel，T 是一个 Channel，x 和 T 的元素类型相同，且其中至少有一个类型是未命名类型
  + x 是 nil，T 的类型是能接收 nil 值的类型
  + x 是可由 T 表示的 *无类型常量*

  参考：
  + [[https://golang.org/ref/spec#Properties_of_types_and_values][Properties of types and values]]
  + [[https://lingchao.xin/post/type-system-overview.html#%E6%A6%82%E5%BF%B5-%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B][Go 类型系统概述]]

* []byte & string
  在 golang 中通过显式类型转换转换 []byte 和 string 类型时会进行一次 copy 操作，如果是在只读环境下，可以考虑通过 unsafe.pointer 完成两者的转换：
  #+begin_src go
    func stringToBytes(s string) []byte {
      x := (*[2]uintptr)(unsafe.Pointer(&s))
      b := [3]uintptr{x[0], x[1], x[1]}
      return *(*[]byte)(unsafe.Pointer(&b))
    }

    func bytesToString(b []byte) string {
      return *(*string)(unsafe.Pointer(&b))
    }
  #+end_src
  
  这样在性能表现上会更好。

* listen N channels
  有时可能存在动态监听多个 channel 的情况，这时可以通过如下方式合并多个 channel：
  #+begin_src go
    agg := make(chan string)
    for _, ch := range chans {
      go func(c chan string) {
        for msg := range c {
          agg <- msg
        }
      }(ch)
    }

    select {
    case msg <- agg:
        fmt.Println("received ", msg)
    }
  #+end_src

  参考：
  + [[https://stackoverflow.com/questions/19992334/how-to-listen-to-n-channels-dynamic-select-statement/32381409][go - how to listen to N channels? (dynamic select statement) - Stack Overflow]]

* Footnotes

[fn:1] 复合类型包括指针、函数、数组、Slice、Map、结构体、Channel 和 Interface
