#+TITLE:      相关问题

* 目录                                                    :TOC_4_gh:noexport:
- [[#创建动态大小的数组][创建动态大小的数组]]
- [[#goroutines-和线程][Goroutines 和线程]]
- [[#包的初始化][包的初始化]]
- [[#how-start-web-server-to-open-page-in-browser-in-golang][How start web server to open page in browser in golang?]]
- [[#如何判断一个文件是否存在][如何判断一个文件是否存在]]
- [[#how-to-return-a-value-in-a-go-function-that-panics][How to return a value in a Go function that panics?]]
- [[#go-116-使用-goembed-需要导入-embed-包的原因][Go 1.16 使用 go:embed 需要导入 embed 包的原因]]
- [[#在-panic-是打印堆栈信息][在 panic 是打印堆栈信息]]

* 创建动态大小的数组
  #+begin_src go
    left := make([]int, leftLength)

    a := make([][]uint8, dy)
    for i := range a {
        a[i] = make([]uint8, dx)
    }
  #+end_src

  参考：
  + [[https://stackoverflow.com/questions/39804861/what-is-a-concise-way-to-create-a-2d-slice-in-go][What is a concise way to create a 2D slice in Go? - Stack Overflow]]
  + [[https://stackoverflow.com/questions/38362631/go-error-non-constant-array-bound][Go error: non-constant array bound - Stack Overflow]]

* Goroutines 和线程
  通过阅读 [[https://books.studygolang.com/gopl-zh/ch9/ch9-08.html][Goroutines 和线程 · Go语言圣经]] 可以了解到 Goroutines 和线程之间的一些区别和联系：
  1. 栈的大小，线程通常会分配一个固定大小的栈，这个栈可能小了也可能大了，而 Goroutines 则是动态的栈，
     一开始很小，后面可以根据需要进行扩大
  2. 线程由内核进行调度，而 Go 的运行时包含了其自己的调度器，这个调度器使用了一些技术手段，比如 m:n 调度，
     在 n 个操作系统线程上多工（调度）m 个 goroutine
  3. 可以通过 GOMAXPROCS 变量来决定会有多少个操作系统的线程同时执行 Go 的代码，默认值是运行机器上的 CPU 的核心数
  4. Goroutine 没有 ID 号，ThreadLocal 也就不存在了……

* 包的初始化
  Go 中包的初始化位于 main 方法之前，其顺序为 import --> const --> var --> init()，可以参考下图：
  #+HTML: <img src="https://astaxie.gitbooks.io/build-web-application-with-golang/en/images/2.3.init.png?raw=true">

  重要的一点：init 函数只会调用一次，可以起到 =sync.Once= 的作用。

  参考：
  + [[https://stackoverflow.com/a/49831018][When is the init() function run? - Stack Overflow]]

* How start web server to open page in browser in golang?
  #+begin_src go
    // open opens the specified URL in the default browser of the user.
    func open(url string) error {
      var cmd string
      var args []string

      switch runtime.GOOS {
      case "windows":
        cmd = "cmd"
        args = []string{"/c", "start"}
      case "darwin":
        cmd = "open"
      default: // "linux", "freebsd", "openbsd", "netbsd"
        cmd = "xdg-open"
      }
      args = append(args, url)
      return exec.Command(cmd, args...).Start()
    }
  #+end_src

  这可能需要 url 的前缀是 http，参考：
  + [[https://stackoverflow.com/questions/39320371/how-start-web-server-to-open-page-in-browser-in-golang][http - How start web server to open page in browser in golang? - Stack Overflow]]

* 如何判断一个文件是否存在
  如果某个文件不存在，那么使用 os.Lstat 就一定会返回 error，只要判断 error 是否代表文件不存在即可：
  #+begin_src go
    func FileExist(path string) bool {
      _, err := os.Lstat(path)
      return !os.IsNotExist(err)
    }
  #+end_src

  参考：
  + [[https://www.cnblogs.com/apocelipes/p/10199618.html][golang 判断文件是否存在 - apocelipes - 博客园]]

* How to return a value in a Go function that panics?
  #+begin_quote
  If doParse panics, the recovery block will set the return value to nil—deferred functions can modify named return values.
  #+end_quote

  参考：
  + [[https://stackoverflow.com/questions/33167282/how-to-return-a-value-in-a-go-function-that-panics][exception handling - How to return a value in a Go function that panics? - Stack Overflow]]

* Go 1.16 使用 go:embed 需要导入 embed 包的原因
  就是通过 import 部分进行标识，避免对每个文件都进行扫描，但还是很突厄，参考：
  + https://go-review.googlesource.com/c/go/+/243941/1


* 在 panic 是打印堆栈信息
  和 Java 不一样，Java 中的 Exception 对象自带打印堆栈信息的方法，而在 Golang 中，recover() 可能获得任意对象，通常都不带堆栈信息，
  如果需要打印，可以使用 runtime/debug 包完成：
  #+begin_src go
    defer func() {
      if r := recover(); r != nil {
        fmt.Println("stacktrace from panic: \n" + string(debug.Stack()))
      }
    }()
  #+end_src

