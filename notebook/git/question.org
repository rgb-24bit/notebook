#+TITLE:      Git 问题集

* 目录                                                    :TOC_4_gh:noexport:
- [[#windows-上设置大小写敏感][Windows 上设置大小写敏感]]
- [[#git-push-冲突怎么办][git push 冲突怎么办]]
- [[#如何创建一个空提交][如何创建一个空提交]]
- [[#如何创建空白分支][如何创建空白分支]]
- [[#本地分支如何跟踪远程分支][本地分支如何跟踪远程分支]]
- [[#怎样创建-git-扩展][怎样创建 Git 扩展]]
- [[#怎样在存储库中保存本地配置][怎样在存储库中保存本地配置]]
- [[#git-checkout-reset-revert-的区别][git checkout, reset, revert 的区别]]
- [[#怎样查看存储库的大小][怎样查看存储库的大小]]
- [[#怎样批量删除过去提交中的文件][怎样批量删除过去提交中的文件]]
- [[#怎样批量更改过去提交中的邮箱和用户名][怎样批量更改过去提交中的邮箱和用户名]]
- [[#怎样撤销一个已经成功合并的-merge][怎样撤销一个已经成功合并的 merge]]
- [[#怎样指定子模块的分支][怎样指定子模块的分支]]
- [[#怎样更新远程分支的名称][怎样更新远程分支的名称]]
- [[#如何删除已提交但是位于-gitignore-的文件][如何删除已提交但是位于 .gitignore 的文件]]
- [[#git-命名的由来][Git 命名的由来]]
- [[#如何在-push-的时候同时向多个远程库推送代码][如何在 push 的时候同时向多个远程库推送代码]]
- [[#git-clone---depth-1-之后获取完整记录][git clone --depth 1 之后获取完整记录]]
- [[#如何删除远程分支][如何删除远程分支]]
- [[#how-do-i-check-out-a-remote-git-branch][How do I check out a remote Git branch?]]
- [[#git-merge--rebase-的区别][git merge & rebase 的区别]]
- [[#git-submodule-shalow-clone][git submodule shalow clone]]
- [[#how-to-replace-local-branch-with-remote-branch-entirely-in-git][How to replace local branch with remote branch entirely in Git?]]
- [[#执行-git-diff-时忽略-m][执行 git diff 时忽略 ^M]]
- [[#修改-tag-的-message][修改 tag 的 message]]

* Windows 上设置大小写敏感
  #+BEGIN_SRC bash
    git config core.ignorecase false  # 设置大小写敏感

    # 修改文件名为小写

    git rm -r --cached .  # 从版本库删除大写文件
    git push
  #+END_SRC

* git push 冲突怎么办
  向一个非空的存储库进行推送的时候可能产出冲突，这时可以这样做：
  #+BEGIN_EXAMPLE
   git remote add origin
   git pull --rebase origin master
   git add --all
   git ci
   git push
 #+END_EXAMPLE

* 如何创建一个空提交
  #+BEGIN_SRC bash
    $ git commit --allow-empty -m "Empty"
  #+END_SRC

* 如何创建空白分支
  1) 创建无提交历史的分支
     #+BEGIN_EXAMPLE
       $ git checkout --orphan <branch>
     #+END_EXAMPLE

  2) 删除工作目录中的内容
     #+BEGIN_EXAMPLE
       $ git rm -rf .
     #+END_EXAMPLE

  3) 创建提交
     #+BEGIN_EXAMPLE
       $ git commit -am "comment"
     #+END_EXAMPLE

* 本地分支如何跟踪远程分支
  #+BEGIN_EXAMPLE
    git branch -u
    git push -u
  #+END_EXAMPLE

* 怎样创建 Git 扩展
 1) 将可执行文件命名为 git-<name>
 2) 通过 git <name> 的方式调用

* 怎样在存储库中保存本地配置
  可以参考的解决方案：
  + 创建文件 ~.gitconfig~ 保存本地配置
  + 克隆存储库后执行：
    #+BEGIN_SRC bash
      git config --local include.path ../.gitconfig
    #+END_SRC

  参考：[[https://stackoverflow.com/questions/18329621/storing-git-config-as-part-of-the-repository][Storing git config as part of the repository - Stack Overflow]]

* git checkout, reset, revert 的区别
  #+BEGIN_EXAMPLE
    A -> B -> C -> D
                   ^
                  HEAD

    checkout:

    A -> B -> C -> D
         ^
        HEAD

    reset:

    A -> B
         ^
        HEAD


    revert:

    A -> B -> C -> D -> B
                        ^
                       HEAD
  #+END_EXAMPLE

* 怎样查看存储库的大小
  可以通过如下方式进行查看：
  #+BEGIN_EXAMPLE
    $ git bundle create tmp.bundle --all
    $ du -sh tmp.bundle
    $ rm tmp.bundle
  #+END_EXAMPLE

* 怎样批量删除过去提交中的文件
  使用 ~filter-branch~ 可以很好的完成这一任务，只不过需要强制推送：
  #+BEGIN_EXAMPLE
    $ git filter-branch --tree-filter "rm -f ..." HEAD
  #+END_EXAMPLE

* 怎样批量更改过去提交中的邮箱和用户名
  参考 [[https://stackoverflow.com/questions/750172/how-to-change-the-author-and-committer-name-and-e-mail-of-multiple-commits-in-gi][stackoverflow]] 中的回答，可以通过如下脚本完成这一任务：
  #+BEGIN_SRC sh
    git filter-branch --env-filter '
    OLD_EMAIL="your-old-email@example.com"
    CORRECT_NAME="Your Correct Name"
    CORRECT_EMAIL="your-correct-email@example.com"
    if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
    then
        export GIT_COMMITTER_NAME="$CORRECT_NAME"
        export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
    fi
    if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
    then
        export GIT_AUTHOR_NAME="$CORRECT_NAME"
        export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
    fi
    ' --tag-name-filter cat -- --branches --tags
  #+END_SRC

* 怎样撤销一个已经成功合并的 merge
  直接的操作方式：
  1. 首先通过 git relog 获得合并前的 commit sha
  2. 然后使用 git reset 重置 HEAD 指针就可以了
     
  参考：[[https://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet][Undo a Git merge that hasn't been pushed yet - Stack Overflow]]

* 怎样指定子模块的分支
  可以通过 git submodule add -b 的方式指定分支，但是似乎存在一个问题：
  #+BEGIN_QUOTE
  只有将存储库克隆到本地后在添加才能在指定分支时不出错？
  #+END_QUOTE

* 怎样更新远程分支的名称
  更新本地分支名称和远程分支名称的指令：
  #+BEGIN_EXAMPLE
    $ git branch -m old-name new-name
    $ git push origin :old-name new-name
  #+END_EXAMPLE

  参考：[[https://www.w3docs.com/snippets/git/how-to-rename-git-local-and-remote-branches.html][How to rename git local and remote branches]]

* 如何删除已提交但是位于 .gitignore 的文件
  使用 ~git rm --cached <file>~ 就可以了，目录可以通过 ~git rm -r --cached <folder>~ 删除，参考：
  + [[https://stackoverflow.com/questions/1274057/how-to-make-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore][How to make Git "forget" about a file that was tracked but is now in .gitignore? - Stack Overflow]]

* Git 命名的由来
  参考：[[https://en.wikipedia.org/wiki/Git#Naming][Git#Naming - Wikipedia]]

* 如何在 push 的时候同时向多个远程库推送代码
  #+begin_src bash
    git remote set-url --add --push [remote] [original repo URL]
    git remote set-url --add --push [remote] [second repo URL]
  #+end_src

  参考：
  + [[https://gist.github.com/bjmiller121/f93cd974ff709d2b968f][Add multiple push URLs to a single git remote]]

* git clone --depth 1 之后获取完整记录

  通过 =git clone --depth 1= 仅克隆一层记录后想重新获取所有提交记录，可以执行：
  #+begin_example
    $ git pull --unshallow
  #+end_example

  但是这样只能获取克隆时指定的分支的记录，如果还需要获取远程分支，可以执行：
  #+begin_example
    $ git fetch origin *:refs/remotes/origin/*
  #+end_example

  然后 =checkout= 远程分支：
  #+begin_example
    git checkout -b <branch> <remote>/<branch>

    or

    git checkout -t <remote>/<branch>
  #+end_example

* 如何删除远程分支
  #+begin_example
    git push -d <remote_name> <branch_name>
  #+end_example

  #+begin_comment
  果然，越简单的问题阅读量越多啊……
  #+end_comment
  
  参考：
  + [[https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely?answertab=votes#tab-top][version control - How do I delete a Git branch locally and remotely? - Stack Overflow]]

* How do I check out a remote Git branch?
  #+begin_example
    git checkout -t <name of remote>/test
  #+end_example

  参考：
  [[https://stackoverflow.com/a/1783426/8177747][git checkout - How do I check out a remote Git branch? - Stack Overflow]]

* git merge & rebase 的区别
  #+HTML: <img src="https://git-scm.com/book/en/v2/images/basic-rebase-1.png">

  对于如上两个分支来说，merge 和 rebase 需要解决的问题是这样的：
  1. 我们需要同时保留 C4 和 C3 相对于 C2 已经作出的修改
  2. git commit 对象是不可变的，也就是说，我们不可能通过修改 C4 或 C3 对象应用另一个分支上的修改
  3. git ref 只是一个引用，是可以随便修改的

  在这样的情况下，git 需要同时保留 C4 和 C3 相对于 C2 已经作出的修改，那么，做法就是创建一个新的 commit 对象，
  这个 commit 对象同时应用了 C4 和 C3 相对于 C2 已经作出的修改，并将 ref 指向该提交。

  而 merge 和 rebase 的区别就在于，创建新 commit 对象的策略不一样：
  + merge 会基于 C2、C3、C4 做一个三方合并，创建一个 merge commit 对象，该对象同时存在两个父 commit，得到的效果如下：
    #+HTML: <img src="https://git-scm.com/book/en/v2/images/basic-rebase-2.png">
  + rebase 的策略是：
    1. 选择一个基准分支，这个分支的 commit 记录保留不动，将另一个分支相对于最近公共祖先的修改提取出来，作为临时文件（patch）保存
    2. 将这些临时文件依次应用在基准分支上
    3. 将 ref 指向最新的分支

    得到的效果如下：
    #+HTML: <img src="https://git-scm.com/book/en/v2/images/basic-rebase-3.png">
    
  简单来说，在这个过程中，merge 只会创建一个新的 merge commit 对象，但是该对象存在两个父 commit，在历史记录上可能不好看。
  而 rebase 可能创建多个 commit 对象，但是历史记录好看。
  
  也就是说使用 merge 最终在历史记录上能够看到的 commit 对象会比 rebase 多一个。

  但是 rebase 这样的做法，会篡改历史记录，假如这个分支关联了远程分支，那么这时就需要：
  1. push -f 远程分支
  2. 或重新 rebase 远程分支

  在 rebase 的过程中，git 或通过一些额外的操作避开相同的修改：
  1. 检查哪些提交是我们的分支上独有的
  2. 检查其中哪些提交不是合并操作的结果
  3. 检查哪些提交在对方覆盖更新时并没有被纳入目标分支
  4. 把查到的这些提交应用在基准分支上

  PS：包括 cherry-pick、commit --amend 操作的本质都是创建了新的 commit 对象，并将 ref 指向新的 commit 对象，旧的 commit 对象其实还存在的，
  直到被 git gc 删除。

  参考：
  + [[https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6][Git - 分支的新建与合并]]
  + [[https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA][Git - 变基]]

* git submodule shalow clone
  #+begin_example
    # clone
    $ git clone <repo> --recursive --shallow-submodules

    # update
    $ git pull
    $ git submodule update --init --recursive --depth 1
  #+end_example

  参考：
  + [[https://stackoverflow.com/questions/2144406/how-to-make-shallow-git-submodules][How to make shallow git submodules? - Stack Overflow]]

* How to replace local branch with remote branch entirely in Git?
  #+begin_example
    $ git reset --hard origin/<branch>

    or

    $ git reset --hard @{u}
  #+end_example

  参考：
  + [[https://stackoverflow.com/questions/9210446/how-to-replace-local-branch-with-remote-branch-entirely-in-git][How to replace local branch with remote branch entirely in Git? - Stack Overflow]]

* 执行 git diff 时忽略 ^M
  #+begin_example
    $ git diff --ignore-space-at-eol

    or

    $ git diff --ignore-space-change

    or

    $ git diff --ignore-all-space
  #+end_example

* 修改 tag 的 message
  #+begin_example
    git tag <tag name> <tag name>^{} -f -m "<new message>"
  #+end_example

  参考：
  + [[https://stackoverflow.com/questions/7813194/how-do-i-edit-an-existing-tag-message-in-git][git tag - How do I edit an existing tag message in git? - Stack Overflow]]

