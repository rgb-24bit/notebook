#+TITLE:      Git 使用技巧

* 目录                                                    :TOC_4_gh:noexport:
- [[#git-pull-时使用存储库的链接][git pull 时使用存储库的链接]]
- [[#git-ignore][git ignore]]
- [[#git-merge-strategy][git merge strategy]]
- [[#使用不同的配置][使用不同的配置]]
- [[#workflow][workflow]]
- [[#合并多个-commit-为一个][合并多个 commit 为一个]]
- [[#配置选项-coreautocrlf-的使用][配置选项 core.autocrlf 的使用]]
- [[#批量删除分支][批量删除分支]]
- [[#重写历史][重写历史]]
- [[#gitrevisions][gitrevisions]]

* git pull 时使用存储库的链接
  git pull 不一定必须使用远程存储库的名称，也可以直接使用远程存储库的链接。

* git ignore
  git 可以从多个来源读取 ignore 配置，这些来源从高到低的优先级为：
  1. 从命令行参数中读取的配置，通常由底层命令使用
  2. 从项目目录下的 ~.gitignore~ 文件中读取的配置，子目录中的 ~.gitignore~ 文件优先级高于父目录
  3. 从 ~$GIT_DIR/info/exclude~ 文件中读取的配置
  4. 从通过 ~core.excludesFile~ 配置指定的文件中读取的配置

  其中，我们应该讲项目共享的忽略规则放到项目目录下的 ~.gitignore~ 文件中，将项目中私人的忽略规则放到 ~$GIT_DIR/info/exclude~ 文件中，
  将全局的忽略规则放到 ~core.excludesFile~ 配置项指定的文件中。

  参考：
  + [[https://git-scm.com/docs/gitignore][Git - gitignore Documentation]]

* git merge strategy
  git 支持多种 merge 策略，部分策略还支持额外的合并选项，使用方式为：
  #+begin_example
    $ git merge -s/--strategy <strategy> -X <strategy option>
  #+end_example

  默认使用的策略为 recursive，使用递归三路合并算法进行合并，可以使用 ours 或 theirs 选项使得在遇到冲突时自动应用 ours 或 theirs 的修改。

  参考：
  + [[https://git-scm.com/docs/git-merge#_pre_merge_checks][Git - git-merge Documentation]]
  + [[https://blog.walterlv.com/post/git-merge-strategy.html#recursive][git 合并策略 - walterlv]]
  
* 使用不同的配置
  当自己在 Github 上的用户名和在公司使用的用户名不一样时，可以选择将公司的仓库全部克隆在一个目录下，
  然后在 =~/.gitconfig= 添加如下配置：
  #+begin_src conf
    [user]
        name = yourname
        email = youremail

    [includeIf "gitdir:~/company/"]
        path = ~/.gitconfig-company
  #+end_src

  此时，在 =~/company= 目录下，会使用 =~/.gitconfig-company= 中的配置覆盖 =~/.gitconfig= 中的配置，这样，
  就可以在 =~/.gitconfig-company= 中指定你在公司的用户名和邮箱了。

  #+begin_src conf
    [user]
        name = companyname
        email = companyemail
  #+end_src

* workflow
  + [[http://www.ruanyifeng.com/blog/2015/12/git-workflow.html][Git 工作流程 - 阮一峰的网络日志]]

* 合并多个 commit 为一个
  #+begin_example
    1. git rebase/merge master
    2. git co master
    3. git diff <branch> | git apply
  #+end_example
  
  包含二进制文件时可以在 diff 后添加 --binary 参数。

* 配置选项 core.autocrlf 的使用
  选项 core.autocrlf 有三个值，各自的作用分别为：
  + =true= - 提交时将 CRLF 转换为 LF，签出时转换为 CRLF
  + =input= - 提交时将 CRLF 转换为 LF，签出时不转换
  + =false= - 不进行任何处理

* 批量删除分支
  git br -d $(git br | grep feature)

* 重写历史
  除了使用 git commit --amend 修改最后一个提交的历史以外，还可以使用 git rebase 修改多个提交的历史，参考：
  + [[https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2][Git - 重写历史]]


* gitrevisions
  Git 很多命令都需要一个 revision 参数，除了常用的 /<sha1 id>、<refname>/ 以外，还支持：
  + <refname>@{<n>}, e.g. master@{1} ::

    通常配合 git reflog 使用，通过这种形式可以快速定位到 ref 变更记录中的某个 commit。

  + [<branchname>]@{upstream}, e.g. master@{upstream}, @{u} :: 

    分支对应的远程分支。

  + <rev>^[<n>], e.g. HEAD^, v1.5.1^0 ::

    ^ 后缀表示对应 rev 的第一个父 commit，^<n> 表示第 n 个父 commit，rev^ 等价于 rev^1，
    rev^0 表示 rev 自己。

    通常 n 取值为 0-1。
    
  + <rev>~[<n>], e.g. HEAD~, master~3 :: 

    和 <rev>^[<n>]，但 n 取值范围更大。

  + <rev1>..<rev2> ::
    
    <rev1> 到 <rev2> 之间的 commit，不包含 rev1。

  参考：
  + [[https://git-scm.com/docs/gitrevisions#Documentation/gitrevisions.txt-emltsha1gtemegemdae86e1950b1277e545cee180551750029cfe735ememdae86eem][Git - gitrevisions Documentation]]
  
