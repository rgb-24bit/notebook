#+TITLE:      Rust

* 目录                                                    :TOC_4_gh:noexport:
- [[#patterns-and-matching][Patterns and Matching]]
- [[#type-conversions][Type Conversions]]
  - [[#smart-pointers][Smart Pointers]]
  - [[#the-dot-operator][The Dot Operator]]
- [[#option-like-enums][Option-like enums]]
- [[#try-trait][Try trait]]
- [[#async-pin][Async Pin]]
- [[#bastion-of-the-turbofish][Bastion of the Turbofish]]

* Patterns and Matching
  Rust 中模式匹配是一个很常用也很强大的功能，本质上，通过 let 绑定变量也是一种模式匹配，函数参数也是一种隐式 let 绑定。

  详细的语法可参考：
  + [[https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html][Pattern Syntax - The Rust Programming Language]]
  + [[https://doc.rust-lang.org/stable/reference/patterns.html][Patterns - The Rust Reference]]

  这里记录一下有关于 ref 模式在 2015 和 2018 下不同引发的困惑：
  1. 在官方文档中，Rust 2015 不能自动推断 ref，所以会存在下面形式的代码：
     #+begin_src rust
       // Rust 2015

       let s: &Option<String> = &Some("hello".to_string());

       match s {
           &Some(ref s) => println!("s is: {}", s),
           _ => (),
       };
     #+end_src

     这里，&Some 匹配 &Option 类型，而 ref s 用于创建变量的引用。

  2. 在 Rust 2018 中，则可以写成下面的形式：
     #+begin_src rust
       let s: &Option<String> = &Some("hello".to_string());

       match s {
           Some(s) => println!("s is: {}", s),
           _ => (),
       };
     #+end_src

  简单来说，在 Rust 2018 中，对于 &Enum::Type(ref x) 类型的匹配，可以直接写成 Enum::Type：
  #+begin_src rust
    let v1: Option<i32> = Some(3);
    match v1 {
        Some(x) => println!("{}", x),  // x is i32
        None => println!("None"),
    }

    let v2: Option<i32> = Some(3);
    match &v1 {
        Some(x) => println!("{}", x),  // x is &i32
        None => println!("None"),
    }
  #+end_src

  参考：
  + [[https://doc.rust-lang.org/edition-guide/rust-2018/ownership-and-lifetimes/default-match-bindings.html][Default match bindings - The Edition Guide]]
  + [[https://doc.rust-lang.org/rust-by-example/scope/borrow/ref.html][The ref pattern - Rust By Example]]

* Type Conversions
  Rust 支持某些类型之间的隐式强制转换，主要有：
  #+begin_quote
  + Transitivity: T_1 to T_3 where T_1 coerces to T_2 and T_2 coerces to T_3
  + Pointer Weakening:
    + &mut T to &T
    + *mut T to *const T
    + &T to *const T
    + &mut T to *mut T
  + Unsizing: T to U if T implements CoerceUnsized<U>
  + Deref coercion: Expression &x of type &T to &*x of type &U if T derefs to U (i.e. T: Deref<Target=U>)
  + Non-capturing closure to a function pointer (RFC 1558, e.g. || 8usize to fn() -> usize)
  #+end_quote

  更多可参考：
  + [[https://doc.rust-lang.org/nomicon/coercions.html][Coercions - The Rustonomicon]]

** Smart Pointers
   当某个类型 T 实现了 Deref<Target=U> 时，我们可以将 &T 当作 &U 来使用，Rust 可以自动完成隐式的类型转换。

   与之相应的还有 DerefMut 这个 trait，允许我们将 &mut T 当作 &mut U 来使用。

   trait 定义：
   #+begin_src rust
     pub trait Deref {
         type Target: ?Sized;
         #[must_use]
         pub fn deref(&self) -> &Self::Target;
     }

     pub trait DerefMut: Deref {
         pub fn deref_mut(&mut self) -> &mut Self::Target;
     }
   #+end_src

   具体的规则：
   #+begin_quote
   + From &T to &U when T: Deref<Target=U>
   + From &mut T to &mut U when T: DerefMut<Target=U>
   + From &mut T to &U when T: Deref<Target=U>
   #+end_quote

   例子：
   #+begin_src rust
     let box_i32 = Box::new(0i32);       // Box<T>, Deref<Target=T>, &Box => &T
     let ref_i32: &i32 = &box_i32;
     let val_i32: i32 = *box_i32;

     let slice: &[u8] = &vec![0u8];      // Vec<T>, Deref<Target=[T]>, &Vec => &[]
     let s: &str = &String::from("0");   // String, Deref<Target=str>, &String => &str
   #+end_src
  
   参考：
   + [[https://doc.rust-lang.org/book/ch15-02-deref.html#how-deref-coercion-interacts-with-mutability][Treating Smart Pointers Like Regular References with the Deref Trait - The Rust Programming Language]]

** The Dot Operator
   在 Rust 中，有的方法在引用类型上，有的在原始类型上，如果每次调用这些方法都需要显示创建引用或解引用无疑会很麻烦，
   因此，Rust 语言中点操作符可以通过自动创建引用、自动解引用和隐式强制类型转换来尝试匹配到可以执行目标操作的类型。

   参考：
   + [[https://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules/28552082#28552082][reference - What are Rust's exact auto-dereferencing rules? - Stack Overflow]]
   + [[https://doc.rust-lang.org/nomicon/dot-operator.html][The Dot Operator - The Rustonomicon]]

* Option-like enums
  在 Rust 中，当一个枚举只有一个单元枚举值和一个非空指针枚举时，编译器可以针对这种情况做优化，省略需要用于存储 tag 的空间：
  #+begin_quote
  The classic case of this is Rust's "null pointer optimization": an enum consisting of a single outer unit variant (e.g. None) and a (potentially nested) non- nullable pointer variant (e.g. Some(&T)) makes the tag unnecessary.
  A null pointer can safely be interpreted as the unit (None) variant. The net result is that, for example, size_of::<Option<&T>>() == size_of::<&T>().
  #+end_quote

  #+begin_src rust
    use std::mem::size_of;

    fn main() {
        println!("{}, {}", size_of::<&i32>(), size_of::<Option<&i32>>());  // 8, 8
        println!("{}, {}", size_of::<i32>(), size_of::<Option<i32>>());    // 4, 8
    }
  #+end_src

  参考：
  + [[https://rust-lang.github.io/unsafe-code-guidelines/layout/enums.html#layout-of-a-data-carrying-enums-without-a-repr-annotation][Enums - Unsafe Code Guidelines Reference]]
  + [[https://doc.rust-lang.org/nomicon/repr-rust.html][repr(Rust) - The Rustonomicon]]
  + [[https://doc.rust-lang.org/std/option/index.html#representation][std::option - Rust]]

* Try trait
  Rust RFC 1859 允许用 Try trait 来自定义可以使用 ? 操作的类型，目前可以使用 ? 操作的类型有：
  #+begin_src rust
    impl<B, C> Try for ControlFlow<B, C>;
    impl<T> Try for Option<T>;
    impl<T, E> Try for Result<T, E>;
    impl<T, E> Try for Poll<Option<Result<T, E>>>;
    impl<T, E> Try for Poll<Result<T, E>>;
  #+end_src

  比如：
  #+begin_src rust
    fn try_it() -> Option<String> {
        Some(foo()?)
    }

    fn foo() -> Option<String> {
        Some("13".into())
    }
  #+end_src
  
  目前 Try trait 还是 experimental API，可以期待 stable 的一天。

  参考：
  + [[https://github.com/rust-lang/rfcs/blob/master/text/1859-try-trait.md][rfcs/1859-try-trait.md at master · rust-lang/rfcs]]
  + [[https://doc.rust-lang.org/std/ops/trait.Try.html][Try in std::ops - Rust]]

* Async Pin
  Rust 在实现 async/.await 时，可能会生成自引用结构体，自引用结构体在使用类似 std::mem::swap 的操作进行移动时，就可能出现问题：
  #+begin_src rust
    #[derive(Debug)]
    struct Test {
        a: String,
        b: *const String,
    }

    fn main() {
        let mut test1 = Test::new("test1");
        test1.init();
        let mut test2 = Test::new("test2");
        test2.init();

        println!("a: {}, b: {}", test1.a(), test1.b());
        std::mem::swap(&mut test1, &mut test2);
        // The pointer to test2.b still points to the old location which is inside test1 now
        println!("a: {}, b: {}", test2.a(), test2.b());
    }
  #+end_src

  而这类操作通常都需要用的 &mut T，因此，Rust 引入了 Pin 类型，让 &mut T 的获取隐藏，达到保护自引用结构的目的。

  参考：
  + [[https://rust-lang.github.io/async-book/04_pinning/01_chapter.html][Pinning - Asynchronous Programming in Rust]]

* Bastion of the Turbofish  
  在 Rust 中，当编译无法自动推断泛型参数时，可以使用 =::<...>= 语法来显式指定类型，这种语法叫做 Turbofish。

  但也有人觉得这样写不好看，就想去掉 =::= 直接写 =<...>=, 但是去掉 =::= 后下面的写法就会存在歧义：
  #+begin_src rust
    fn main() {
        let (oh, woe, is, me) = ("the", "Turbofish", "remains", "undefeated");
        let _: (bool, bool) = (oh<woe, is>(me));
    }
  #+end_src

  如果没有 ::，这里可能是 =oh<woe, is>(me)= 的函数调用，也可以是 =oh < woe= 和 =is > (me)= 两个布尔判断。

  这就是 Bastion of the Turbofish。

  参考：
  + [[https://github.com/rust-lang/rust/blob/master/src/test/ui/bastion-of-the-turbofish.rs][rust/bastion-of-the-turbofish.rs at master · rust-lang/rust]]

