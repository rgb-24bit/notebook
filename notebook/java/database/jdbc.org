#+TITLE:      JDBC

* 目录                                                    :TOC_4_gh:noexport:
- [[#简单使用][简单使用]]
- [[#各数据库][各数据库]]
  - [[#mysql][MySQL]]
- [[#数据库连接池][数据库连接池]]
- [[#相关问题][相关问题]]
  - [[#driver-时如何通过-classforname-的方式进行注册的][Driver 时如何通过 Class.forName 的方式进行注册的]]

* 简单使用
  JDBC 帮助管理三种编程活动：连接数据库、将查询和更新语句发送到数据库和检索并处理从数据库接收的结果。

  使用时，需要先通过 ~Class.forName()~ 加载驱动，然后在通过 ~DriverManager.getConnection~ 获取连接。但是高版本的 JDBC 可以通过 SPI 机制根据数据库 URI 自动注册驱动，
  因此可以省略 Class.forName 这一步。

  自动注册驱动的方式大概为：通过静态初始化块进行的注册操作，因此加载类时便完成了注册。

  通过 JDBC 执行 SQL 的一般步骤为：建立连接、创建语句、执行查询、处理结果集、关闭连接。

  获取连接对象可以通过如下方式实现：
  #+BEGIN_SRC java
    DriverManager.getConnection(...)
  #+END_SRC
  
  语句对象类型及创建它们的方法：
  |-------------------+-----------------------------+------------------------------------------|
  | 语句对象类型      | 创建方法                    | 描述                                     |
  |-------------------+-----------------------------+------------------------------------------|
  | ~Statement~         | ~Connection.createStatement~  | 用于实现没有参数的简单 SQL 语句          |
  | ~CallableStatement~ | ~Connection.prepareCall~      | 用于执行可能包含输入和输出参数的存储过程 |
  | ~PreparedStatement~ | ~Connection.prepareStatement~ | 用于预编译可能包含输入参数的 SQL 语句    |
  |-------------------+-----------------------------+------------------------------------------|

  ~PrepareStatement~ 会自动对语句中的危险字符进行转义，其简单使用如下：
  #+BEGIN_SRC java
    PrepareStatement stmt = Connection.prepareStatement("SELECT * FROM table WHERE id=? AND name=?");  // 创建 PrepareStatement 语句对象
    stmt.setInt(1, 1001);      // 设置 id 的值为 1001
    stmt.setString(2, "job");  // 设置 name 的值为 job
  #+END_SRC

  ~PrepareStatement~ 的使用还是比较简单的，需要注意的是 ~SQL~ 语句中的参数的起始索引为 ~1~ 而不是 ~0~.

  执行 SQL 语句的三个方法：
  + ~execute~ - 如果执行的语句返回 ~ResultSet~ 对象就返回 ~true~, 执行的语句可以返回多个结果集。使用 ~Statement.getResultSet~ 方法获取结果集
  + ~executeQuery~ - 执行查询并返回结果集
  + ~executeUpdate~ - 返回一个整数，表示受 SQL 语句影响的行数。常用于 ~INSERT~, ~DELETE~ 和 ~UPDATE~ 语句的执行

  结果集的简单处理方式：
  #+BEGIN_SRC java
    while (rs.next()) {
      String coffeeName = rs.getString("COF_NAME");
      int supplierID = rs.getInt("SUP_ID");
      float price = rs.getFloat("PRICE");
      int sales = rs.getInt("SALES");
      int total = rs.getInt("TOTAL");
    }
  #+END_SRC

  关闭连接可以在 finally 块中完成：
  #+BEGIN_SRC java
    } finally {
        if (stmt != null) { stmt.close(); }
      }
  #+END_SRC

* 各数据库
** MySQL 
   MySQL 对 JDBC 的支持情况：
   |---------------------+--------------------+----------------------+-----------------------------+------------------------------+--------------------------------------------|
   | Connector/J version | JDBC version       | MySQL Server version | JRE Supported               | JDK Required for Compilation | Status                                     |
   |---------------------+--------------------+----------------------+-----------------------------+------------------------------+--------------------------------------------|
   |                 8.0 | 4.2                | 5.6, 5.7, 8.0        | 1.8.x                       | 1.8.x                        | General availability. Recommended version. |
   |                 5.1 | 3.0, 4.0, 4.1, 4.2 | 5.6*, 5.7*, 8.0*     | 1.5.x, 1.6.x, 1.7.x, 1.8.x* | 1.5.x and 1.8.x              | General availability                       |
   |---------------------+--------------------+----------------------+-----------------------------+------------------------------+--------------------------------------------|

   需要注意的是，通过 JDBC 连接数据库时可能因为时区的原因出现错误，此时，可以将连接字符串设置为如下形式：
   #+BEGIN_EXAMPLE
     jdbc:mysql://localhost:3306/test?serverTimezone=UTC
   #+END_EXAMPLE

   MySQL 和 JDBC 之间的类型映射：[[https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-type-conversions.html][MySQL :: MySQL Connector/J 8.0 Developer Guide :: 6.5 Java, JDBC, and MySQL Types]]

   需要注意，数据库中 DECIMAL 类型默认是不带小数位的。

* 数据库连接池
  数据库连接池的一个基本作用就是用来管理数据库的 *连接* 资源，Java 中常用的数据库连接池为 ~C3P0~, ~DBCP~ 和 ~Druid~.

  而 JDBC 也提供了对数据库连接池规范的支持，这一点可以通过查阅 [[http://download.oracle.com/otn-pub/jcp/jdbc-4_1-mrel-spec/jdbc4.1-fr-spec.pdf][JDBC 4.1 Specification]] 证明。

  可以参考的文章：[[https://juejin.im/post/5af026a06fb9a07ac47ff282][数据库连接池的实现及原理 - 掘金]]

* 相关问题
** Driver 时如何通过 Class.forName 的方式进行注册的
   通过静态代码块完成注册，比如 MySQL Driver 中的静态代码块：
   #+begin_src java
     public class Driver extends NonRegisteringDriver implements java.sql.Driver {
       //
       // Register ourselves with the DriverManager
       //
       static {
         try {
           java.sql.DriverManager.registerDriver(new Driver());
         } catch (SQLException E) {
           throw new RuntimeException("Can't register driver!");
         }
       }

       /**
        ,* Construct a new driver and register it with DriverManager
        ,*
        ,* @throws SQLException
        ,*             if a database error occurs.
        ,*/
       public Driver() throws SQLException {
         // Required for Class.forName().newInstance()
       }
     }
   #+end_src

   更多：[[https://rgb-24bit.github.io/blog/2019/java-spi.html#org4f9a56c][Java SPI 机制及其实现]]

