#+TITLE:      Bash

* 目录                                                    :TOC_4_gh:noexport:
- [[#shebang][shebang]]
- [[#内置命令][内置命令]]
- [[#语法][语法]]
- [[#子-shell][子 shell]]
- [[#命令行参数][命令行参数]]
- [[#代理配置][代理配置]]
- [[#配置文件][配置文件]]
- [[#prompt_command][PROMPT_COMMAND]]
- [[#相关技巧][相关技巧]]
  - [[#获取当前目录][获取当前目录]]
- [[#相关问题][相关问题]]
  - [[#怎样将字符串转换为小写][怎样将字符串转换为小写]]
  - [[#怎样在命令行格式化-json-字符串][怎样在命令行格式化 json 字符串]]
  - [[#如何在脚本里面调用另一个脚本][如何在脚本里面调用另一个脚本]]
  - [[#遍历命令行参数][遍历命令行参数]]
  - [[#在函数内部使用-getopts][在函数内部使用 getopts]]
  - [[#执行传入的命令][执行传入的命令]]
  - [[#var-var-和-var-的区别][${var}, "$var" 和 "${var}" 的区别]]
  - [[#单引号和双引号的区别][单引号和双引号的区别]]
  - [[#-和--的区别][[ 和 [[ 的区别]]

* shebang
  脚本第一行叫做 ~shebang~, 用于告诉 ~shell~ 使用什么程序执行这个脚本。
  #+BEGIN_SRC bash
    #!/usr/bin/env bash
  #+END_SRC

* 内置命令
  set 命令可以用来修改 Shell 环境的运行参数，如果命令行下不带任何参数，直接运行 set，还会显示所有的环境变量和 Shell 函数。

  常用的选项：
  + -u，-o nounset，遇到不存在的变量时报错，并停止执行
  + -x，-o xtrace，在运行结果之前，先输出执行的那一行命令
  + -e，-o errexit，脚本只要发生错误，就终止执行
  + -o pipefail，只要一个子命令失败，整个管道命令就失败，脚本终止执行

  合并写法：
  #+begin_example
    # 写法一
    set -euxo pipefail

    # 写法二
    set -eux
    set -o pipefail
  #+end_example

  参考：
  + [[http://www.ruanyifeng.com/blog/2017/11/bash-set.html][Bash 脚本 set 命令教程 - 阮一峰的网络日志]]

  -----

  shopt 命令也可以用来设置选项，-s 打开，-u 关闭，参考：
  + [[https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html][The Shopt Builtin (Bash Reference Manual)]]

* 语法
  变量操作：
  #+begin_src bash
    varname=value                       # 定义变量
    varname=value command               # 定义子进程变量并执行子进程
    echo $varname                       # 查看变量内容
    echo $$                             # 查看当前 shell 的进程号
    echo $!                             # 查看最近调用的后台任务进程号
    echo $?                             # 查看最近一条命令的返回码
    export VARNAME=value                # 设置环境变量（将会影响到子进程）

    array[0]=valA                       # 定义数组
    array[1]=valB
    array[2]=valC
    array=([0]=valA [1]=valB [2]=valC)  # 另一种方式
    array=(valA valB valC)              # 另一种方式

    ${array[i]}                         # 取得数组中的元素
    ${#array[@]}                        # 取得数组的长度
    ${#array[i]}                        # 取得数组中某个变量的长度

    declare -a                          # 查看所有数组
    declare -f                          # 查看所有函数
    declare -F                          # 查看所有函数，仅显示函数名
    declare -i                          # 查看所有整数
    declare -r                          # 查看所有只读变量
    declare -x                          # 查看所有被导出成环境变量的东西
    declare -p varname                  # 输出变量是怎么定义的（类型+值）

    ${varname:-word}                    # 如果变量不为空则返回变量，否则返回 word
    ${varname:=word}                    # 如果变量不为空则返回变量，否则赋值成 word 并返回
    ${varname:?message}                 # 如果变量不为空则返回变量，否则打印错误信息并退出
    ${varname:+word}                    # 如果变量不为空则返回 word，否则返回 null
    ${varname:offset:len}               # 取得字符串的子字符串

    ${variable#pattern}                 # 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的
    ${variable##pattern}                # 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的
    ${variable%pattern}                 # 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的
    ${variable%%pattern}                # 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的
    ${variable/pattern/str}             # 将变量中第一个匹配 pattern 的替换成 str，并返回
    ${variable//pattern/str}            # 将变量中所有匹配 pattern 的地方替换成 str 并返回

    ${#varname}                         # 返回字符串长度

    ,*(patternlist)                      # 零次或者多次匹配
    +(patternlist)                      # 一次或者多次匹配
    ?(patternlist)                      # 零次或者一次匹配
    @(patternlist)                      # 单词匹配
    !(patternlist)                      # 不匹配

    array=($text)                       # 按空格分隔 text 成数组，并赋值给变量
    IFS="/" array=($text)               # 按斜杆分隔字符串 text 成数组，并赋值给变量
    text="${array[*]}"                  # 用空格链接数组并赋值给变量
    text=$(IFS=/; echo "${array[*]}")   # 用斜杠链接数组并赋值给变量

    A=( foo bar "a  b c" 42 )           # 数组定义
    B=("${A[@]:1:2}")                   # 数组切片：B=( bar "a  b c" )
    C=("${A[@]:1}")                     # 数组切片：C=( bar "a  b c" 42 )
    echo "${B[@]}"                      # bar a  b c
    echo "${B[1]}"                      # a  b c
    echo "${C[@]}"                      # bar a  b c 42
    echo "${C[@]: -2:2}"                # a  b c 42  减号前的空格是必须的

    $(UNIX command)                     # 运行命令，并将标准输出内容捕获并返回
    varname=$(id -u user)               # 将用户名为 user 的 uid 赋值给 varname 变量

    num=$(expr 1 + 2)                   # 兼容 posix sh 的计算，使用 expr 命令计算结果
    num=$(expr $num + 1)                # 数字自增
    expr 2 \* \( 2 + 3 \)               # 兼容 posix sh 的复杂计算，输出 10

    num=$((1 + 2))                      # 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算
    num=$(($num + 1))                   # 变量递增
    num=$((num + 1))                    # 变量递增，双括号内的 $ 可以省略
    num=$((1 + (2 + 3) * 2))            # 复杂计算

  #+end_src

  -----

  条件判断：
  #+begin_src bash
    statement1 && statement2  # and 操作符
    statement1 || statement2  # or 操作符

    exp1 -a exp2              # exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）
    exp1 -o exp2              # exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）
    ( expression )            # 如果 expression 为真时返回真，输入注意括号前反斜杆
    ! expression              # 如果 expression 为假那返回真

    str1 = str2               # 判断字符串相等，如 [ "$x" = "$y" ] && echo yes
    str1 != str2              # 判断字符串不等，如 [ "$x" != "$y" ] && echo yes
    str1 < str2               # 字符串小于，如 [ "$x" \< "$y" ] && echo yes
    str2 > str2               # 字符串大于，注意 < 或 > 是字面量，输入时要加反斜杆
    -n str1                   # 判断字符串不为空（长度大于零）
    -z str1                   # 判断字符串为空（长度等于零）

    -a file                   # 判断文件存在，如 [ -a /tmp/abc ] && echo "exists"
    -d file                   # 判断文件存在，且该文件是一个目录
    -e file                   # 判断文件存在，和 -a 等价
    -f file                   # 判断文件存在，且该文件是一个普通文件（非目录等）
    -r file                   # 判断文件存在，且可读
    -s file                   # 判断文件存在，且尺寸大于0
    -w file                   # 判断文件存在，且可写
    -x file                   # 判断文件存在，且执行
    -N file                   # 文件上次修改过后还没有读取过
    -O file                   # 文件存在且属于当前用户
    -G file                   # 文件存在且匹配你的用户组
    file1 -nt file2           # 文件1 比 文件2 新
    file1 -ot file2           # 文件1 比 文件2 旧

    num1 -eq num2             # 数字判断：num1 == num2
    num1 -ne num2             # 数字判断：num1 != num2
    num1 -lt num2             # 数字判断：num1 < num2
    num1 -le num2             # 数字判断：num1 <= num2
    num1 -gt num2             # 数字判断：num1 > num2
    num1 -ge num2             # 数字判断：num1 >= num2
  #+end_src

  -----

  分支选择：
  #+begin_src bash
    test {expression}         # 判断条件为真的话 test 程序返回0 否则非零
    [ expression ]            # 判断条件为真的话返回0 否则非零

    test "abc" = "def"        # 查看返回值 echo $? 显示 1，因为条件为假
    test "abc" != "def"       # 查看返回值 echo $? 显示 0，因为条件为真

    test -a /tmp; echo $?     # 调用 test 判断 /tmp 是否存在，并打印 test 的返回值
    [ -a /tmp ]; echo $?      # 和上面完全等价，/tmp 肯定是存在的，所以输出是 0

    test cond && cmd1         # 判断条件为真时执行 cmd1
    [ cond ] && cmd1          # 和上面完全等价
    [ cond ] && cmd1 || cmd2  # 条件为真执行 cmd1 否则执行 cmd2

    # 判断 /etc/passwd 文件是否存在
    # 经典的 if 语句就是判断后面的命令返回值为0的话，认为条件为真，否则为假
    if test -e /etc/passwd; then
        echo "alright it exists ... "
    else
        echo "it doesn't exist ... "
    fi

    # 和上面完全等价，[ 是个和 test 一样的可执行程序，但最后一个参数必须为 ]
    # 这个名字为 "[" 的可执行程序一般就在 /bin 或 /usr/bin 下面，比 test 优雅些
    if [ -e /etc/passwd ]; then
        echo "alright it exists ... "
    else
        echo "it doesn't exist ... "
    fi

    # 和上面两个完全等价，其实到 bash 时代 [ 已经是内部命令了，用 enable 可以看到
    [ -e /etc/passwd ] && echo "alright it exists" || echo "it doesn't exist"

    # 判断变量的值
    if [ "$varname" = "foo" ]; then
        echo "this is foo"
    elif [ "$varname" = "bar" ]; then
        echo "this is bar"
    else
        echo "neither"
    fi

    # 复杂条件判断，注意 || 和 && 是完全兼容 POSIX 的推荐写法
    if [ $x -gt 10 ] && [ $x -lt 20 ]; then
        echo "yes, between 10 and 20"
    fi

    # 可以用 && 命令连接符来做和上面完全等价的事情
    [ $x -gt 10 ] && [ $x -lt 20 ] && echo "yes, between 10 and 20"

    # 小括号和 -a -o 是 POSIX XSI 扩展写法，小括号是字面量，输入时前面要加反斜杆
    if [ \( $x -gt 10 \) -a \( $x -lt 20 \) ]; then
        echo "yes, between 10 and 20"
    fi

    # 同样可以用 && 命令连接符来做和上面完全等价的事情
    [ \( $x -gt 10 \) -a \( $x -lt 20 \) ] && echo "yes, between 10 and 20"


    # 判断程序存在的话就执行
    [ -x /bin/ls ] && /bin/ls -l
  #+end_src

* 子 shell
  在 shell 中是否进入子 shell 的情况可以分为几种：
  1. 执行 bash 内置命令时，父进程不会创建子进程来执行这些命令，而是直接在当前 bash 环境中执行。但如果将内置命令放在管道后，则此内置命令将和管道左边的进程同属于一个进程组
  2. 执行 bash 命令本身时，会进入新的子 shell 环境
  3. 通过 ./script.sh 的方式执行 shell 脚本时，进入子 shell 环境
  4. 执行 shell 函数时，和执行内置命令的情况类似，因此可以通过 shell 函数来使用或修改当前 shell 的环境
  5. 命令替换，通过 $() 执行命令时会进入子 shell
  6. 使用括号 () 组合一系列命令时也会进入子 shell

  参考：
  + [[https://www.cnblogs.com/f-ck-need-u/p/7446194.html][子 shell 以及什么时候进入子 shell - 骏马金龙 - 博客园]]

* 命令行参数
  在简单的 Shell 脚本中我们可以通过一些内置变量来处理命令行参数，包括：
  |----------+----------------------------------------------------------------------------|
  | 内置变量 | 含义                                                                       |
  |----------+----------------------------------------------------------------------------|
  | ~$0~       | 命令本身                                                                   |
  | ~$1..n~    | 第 1 到第 n 个参数                                                         |
  | ~$#~       | 命令行参数的个数                                                           |
  | ~$@~       | 参数本身的列表，命令本身除外                                               |
  | ~$*~       | 和 ~$@~ 相同，只不过 ="$*"= 会将参数解释成一个字符串，而 ="$@"= 会解释为参数数组 |
  | =$?=       | 上个命令的退出状态，或函数的返回值                                         |
  | =$$=       | 当前 Shell 进程 ID                                                         |
  |----------+----------------------------------------------------------------------------|

  但是在复杂的脚本中我们往往需要更好的处理命令行参数的方式，这时可以使用内置的 ~getopts~ 命令：
  #+begin_src bash
    while getopts "a:bc" arg            # 选项后面的冒号表示该选项需要参数
    do
        case $arg in
            a)
                echo "a's arg:$OPTARG"  # 参数存在 $OPTARG 中
                ;;
            b)
                echo "b"
                ;;
            c)
                echo "c"
                ;;
            ?)                          # 当有不认识的选项的时候 arg 为 ?
            echo "unkonw argument"
            ;;
        esac
    done
  #+end_src

  参数默认值：
  #+begin_src sh
    # not define
    ${VAR-DEFAULT}

    # not define or ''
    ${VAR:-DEFAULT}
  #+end_src

  参考：
  + [[https://www.cnblogs.com/franktan/archive/2010/03/01/1634516.html][Bash Shell 中命令行选项/参数处理 - Frank Tan - 博客园]]

* 代理配置
  |-------------+----------------------------------------------------+------------------------------------------|
  | 变量        | 描述                                               | 值示例                                   |
  |-------------+----------------------------------------------------+------------------------------------------|
  | http_proxy  | 为 http 网站设置代理                               | 10.0.0.51:8080,socks5://192.168.1.1:1080 |
  | https_proxy | 为 https 网站设置代理                              | 同上                                     |
  | ftp_proxy   | 为 ftp 协议设置代理                                | socks5://192.168.1.1:1080                |
  | no_proxy    | 无需代理的主机或域名，可以使用通配符，用「，」分隔 | *.aiezu.com                              |
  |-------------+----------------------------------------------------+------------------------------------------|

  配置为函数：
  #+begin_src sh
    proxy() {
        http_proxy=<addr> https_proxy=<addr> $@
    }
  #+end_src

  注意，这两项配置对 ssh 是不起作用的，ssh 代理的配置需要修改 ~/.ssh/config 文件，不同系统的配置也不一样，可以参考：
  + [[https://stackoverflow.com/questions/5103083/ssh-in-git-behind-proxy-on-windows-7][SSH in git behind proxy on windows 7 - Stack Overflow]]

  参考：
  + [[https://aiezu.com/article/linux_bash_set_proxy.html][Linux bash终端设置代理（proxy）访问 - 爱E族]]

* 配置文件
  Bash 配置文件的读取需要区分 login shell 和 non-login shell，而是不是 login shell 则是在交互式 shell 中判断的。

  交互式 shell 就是指平时那种输入命令执行的 shell，而非交互式 shell，可以理解为 bash script 的运行环境。

  登录式 shell 是用户使用自己的 user ID 登录交互式 shell 的第一个进程，而在 login shell 内打开的新 shell 就不是 login shell 了，
  不同 shell 读取的配置文件顺序为：
  #+begin_example
    +----------------+-----------+-----------+------+
    |                |Interactive|Interactive|Script|
    |                |login      |non-login  |      |
    +----------------+-----------+-----------+------+
    |/etc/profile    |   A       |           |      |
    +----------------+-----------+-----------+------+
    |/etc/bash.bashrc|           |    A      |      |
    +----------------+-----------+-----------+------+
    |~/.bashrc       |           |    B      |      |
    +----------------+-----------+-----------+------+
    |~/.bash_profile |   B1      |           |      |
    +----------------+-----------+-----------+------+
    |~/.bash_login   |   B2      |           |      |
    +----------------+-----------+-----------+------+
    |~/.profile      |   B3      |           |      |
    +----------------+-----------+-----------+------+
    |                |           |           |      |
    +----------------+-----------+-----------+------+
    |BASH_ENV        |           |           |  A   |
    +----------------+-----------+-----------+------+
    |                |           |           |      |
    +----------------+-----------+-----------+------+
    |~/.bash_logout  |    C      |           |      |
    +----------------+-----------+-----------+------+
  #+end_example

  其中，读取顺序 A -> B -> C，B1 B2 B3 表示只读取其中第一个发现的文件。

  参考：
  + [[https://superuser.com/questions/183870/difference-between-bashrc-and-bash-profile][bash - Difference between .bashrc and .bash_profile - Super User]]
  + [[http://einverne.github.io/post/2019/01/login-shell-vs-non-login-shell.html][登录式 shell 和非登录式 shell 区别 | Verne in GitHub]]

* PROMPT_COMMAND
  PROMPT_COMMAND 是一个 bash 环境变量，这个变量的中内容是作为一个普通的 bash 命令执行的，而且执行时间是在 bash 显示 prompt 之前，可以通过这个变量来记录执行日志：
  #+begin_src sh
    LOGIN_IP=$(who am i | awk '{print $NF}')
    \export PROMPT_COMMAND='{ msg=$(history 1 | { read x y; echo $y; });echo $(date +"%Y-%m-%d %H:%M:%S") [$(whoami)@$SSH_USER$LOGIN_IP `pwd` ]" $msg" >> /var/log/.history; }'
  #+end_src

* 相关技巧
  + 可以通过 type 判断命令是 可执行文件、shell 内置命令还是别名
  + 可以通过 apropos 和关键词在 man page 描述中查找相应的程序
  + 通过 command <xxx> 的方式忽略 alias 直接执行程序或者内建命令

** 获取当前目录
   #+begin_src sh
     DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
   #+end_src

   遍历目录下文件：
   #+begin_src sh
     loadScripts() {
         for __SCRIPT in $__CURRENT_DIR/$1/*; do
             if [ -r $__SCRIPT ]; then
                 source $__SCRIPT
             fi
         done
     }
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself][How to get the source directory of a Bash script from within the script itself? - Stack Overflow]]

* 相关问题
** 怎样将字符串转换为小写
   简单点的方式可以使用 ~tr~ 命令来完成这一操作：
   #+begin_src bash
     $ echo STRING | tr '[:upper:]' '[:lower:]'
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/2264428/how-to-convert-a-string-to-lower-case-in-bash][How to convert a string to lower case in Bash? - Stack Overflow]]

** 怎样在命令行格式化 json 字符串
   在拥有 ~Python~ 解释器的环境中可以通过如下方式实现：
   #+begin_src bash
     $ curl -s url | python -m json.tool
   #+end_src

   更多可以参考：
   + [[https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script][unix - How can I pretty-print JSON in a shell script? - Stack Overflow]]

** 如何在脚本里面调用另一个脚本
   可以使用如下三种方式，其中，使用 =bash= 的适合无法修改当前 shell 的环境变量，而 =.= 是 =source= 的一种 alias：
   #+begin_src sh
     bash another_script.sh
     source another_script.sh
     . another_script.sh
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/8352851/how-to-call-one-shell-script-from-another-shell-script][bash - How to call one shell script from another shell script? - Stack Overflow]]

** 遍历命令行参数
   #+begin_src sh
     for var in "$@"
     do
         echo "$var"
     done
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/255898/how-to-iterate-over-arguments-in-a-bash-script][command line - How to iterate over arguments in a Bash script - Stack Overflow]]

** 在函数内部使用 getopts
   在使用 =getopts= 之前设置 =local OPTIND= 就行了：
   #+begin_src sh
     foo()
     {
         foo_usage() { echo "foo: [-a <arg>]" 1>&2; exit; }

         local OPTIND o a
         while getopts ":a:" o; do
             case "${o}" in
                 a)
                     a="${OPTARG}"
                     ;;
                 ,*)
                     foo_usage
                     ;;
             esac
         done
         shift $((OPTIND-1))

         echo "a: [${a}], non-option arguments: $*"
     }
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/16654607/using-getopts-inside-a-bash-function][Using getopts inside a Bash function - Stack Overflow]]

** 执行传入的命令
   #+begin_src sh
     COMMAND="$@"
     http_proxy=... $COMMAND
   #+end_src

** ${var}, "$var" 和 "${var}" 的区别
   1. 大多数情况下，$var 和 ${var} 是一样的
   2. 通过双引号包裹时，它们被视为单个 word
      #+begin_src sh
        var="foo bar"
        for i in "$var"; do # Expands to 'for i in "foo bar"; do...'
            echo $i         #   so only runs the loop once
        done
        # foo bar

        var="foo bar"
        for i in "$varbar"; do # Expands to 'for i in ""; do...' since there is no
            echo $i            #   variable named 'varbar', so loop runs once and
        done                   #   prints nothing (actually "")

        var="foo bar"
        for i in "${var}bar"; do # Expands to 'for i in "foo barbar"; do...'
            echo $i              #   so runs the loop once
        done
        # foo barbar
      #+end_src

   参考：
   + [[https://stackoverflow.com/questions/18135451/what-is-the-difference-between-var-var-and-var-in-the-bash-shell][What is the difference between ${var}, "$var", and "${var}" in the Bash shell? - Stack Overflow]]

** 单引号和双引号的区别
   #+begin_src sh
     $ echo "$(echo "upg")"
     upg
     $ echo '$(echo "upg")'
     $(echo "upg")
   #+end_src

   参考：
   + [[https://stackoverflow.com/questions/6697753/difference-between-single-and-double-quotes-in-bash][shell - Difference between single and double quotes in Bash - Stack Overflow]]

** [ 和 [[ 的区别
   单左括号 [ 命令是一个可执行程序，位于 /bin 或者 /usr/bin 下面，它的使用方法和 test 完全一样，只是要求最后一个参数后要多加一个右括号：
   #+begin_example
     test -a /tmp; echo $?   # 调用 test 判断 /tmp 是否存在，并打印 test 的返回值
     [ -a /tmp ]; echo $?    # 和上面完全等价，/tmp 肯定是存在的，所以输出是 0
   #+end_example

   但是单括号写起来更优雅，而 [[ 则是 bash 的扩展，参考：
   + [[https://www.zhihu.com/question/266787434][Bash 脚本中 (、((、[、[[ 的区别是什么？ - 知乎]]
