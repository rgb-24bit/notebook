#+TITLE:      Python Misc

* 目录                                                    :TOC_4_gh:noexport:
- [[#使用-strmaketrans-转换消除字符][使用 str.maketrans 转换消除字符]]
- [[#python-中的浮点数字面量][Python 中的浮点数字面量]]
- [[#获取命令行参数][获取命令行参数]]
- [[#获取某一周的第一天][获取某一周的第一天]]
- [[#python-在不同平台上的环境控制工具][Python 在不同平台上的环境控制工具]]
- [[#鸭子类型][鸭子类型]]

* 使用 str.maketrans 转换消除字符
  #+BEGIN_SRC python
    new_file = old_file.translate(str.maketrans(' :', '--', '“”()'))

    # >>> '“文件 A”: (测试用)'.translate(str.maketrans(' :', '--', '“”()'))
    # '文件-A--测试用'
  #+END_SRC

  参考官方文档可以得知：第三个参数将会被映射为空字符串

* Python 中的浮点数字面量
  Python 中的浮点数字面量可以省略小数点前面的部分，使其默认为 0：
  #+BEGIN_SRC python
    >>> 2 ** .5
    1.4142135623730951
  #+END_SRC

* 获取命令行参数
  #+begin_src python
    prog, *args = sys.argv
  #+end_src

* 获取某一周的第一天
  #+BEGIN_SRC python
    def isoweek2date(year, isoweek):
        weekday = '%s %s 1' % (year, isoweek)
        return datetime.datetime.strptime(weekday, '%G %V %u').date()
  #+END_SRC

* Python 在不同平台上的环境控制工具
  对于 Node.js 来说可以用 nvm 来控制多个版本的 node 环境，Python 也具有类似的工具，只不过在 ~unix/linux~ 和 ~windows~ 平台上有一些区别：
  + ~windows~ 平台可以使用 ~Python Launcher for Windows~ 来进行控制
  + ~unix/linux~ 平台可以使用 ~pyenv~ 来进行控制

  另外，虚拟环境常用 ~virtualenv~ 和 ~venv~ 来进行创建和使用。


* 鸭子类型
  鸭子类型（英语：duck typing）在程序设计中是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由 *当前方法和属性的集合* 决定。

  这一点上有点像接口或 Ad-hoc 多态，定义一组行为集合，只要某个类型实现了这些行为，那么它就实现了对应的接口。

  相关问题：
  + [[https://stackoverflow.com/questions/1549801/what-are-the-differences-between-type-and-isinstance][python - What are the differences between type() and isinstance()? - Stack Overflow]]
