#+TITLE:      Emacs

* 目录                                                    :TOC_4_gh:noexport:
- [[#important-general-concepts][Important General Concepts]]
- [[#fundamental-editing-commands][Fundamental Editing Commands]]
- [[#important-text-changing-commands][Important Text-Changing Commands]]

* Important General Concepts
  也许是 Emacs 的诞生比较早的原因，操作系统层面的单个窗口或终端界面在 Emacs 中的名称为 Frame。

  在 =Frame= 内部的才是 Emacs 的 Window，每个 Window 的最后一行是一个 mode line，整体结构为：
  #+begin_example
    Frame
      Menu bar
      Tool bar
      Window
        buffer text
        scroll bar
        mode line
      Echo area
  #+end_example

  其中，echo area 还被用来显示 minibuffer（一个特殊的 Window），可以用个快捷键 =C-g= 退出 minibuffer。

  Emacs 中可以将用户输入分为：
  + Simple characters 简单字符，包括字母、数字、符号和空格
  + Control characters 控制字符，包括 <RET>、<TAB>、<DEL>、<ESC>、<F1>、<HOME> 和 <LEFT> 等
  + Modifier keys，通过 <Control> 和 <Meta> 可以改变接下来输入的字符的含义，变为控制字符

  可以使用 <ESC> 来代替 <Meta> 键，而且 <ESC> 按下后可以松开，但是 <Meta> 不行，但是 <Meta> 近一点。

  在 Emacs 中，一个按键序列 key sequnce，如 C-x C-f，或者一个短按键，如 C-f，被称作 =compile key=.

  对于 =C-x C-f= 这样的按键序列中，C-x 部分被称作 =prefix key=.

  Emacs 中默认的前缀键有：‘C-c’, ‘C-h’, ‘C-x’, ‘C-x <RET>’, ‘C-x @’, ‘C-x a’, ‘C-x n’, ‘C-x r’, ‘C-x v’, ‘C-x 4’, ‘C-x 5’, ‘C-x 6’, <ESC>, ‘M-g’, and ‘M-o’.
  (<F1> and <F2> are aliases for ‘C-h’ and ‘C-x 6’.)

  按键到具体命令之间的映射被叫做 ‘keymaps’。

  在 Unix/Linux 系统中，通过命令行启动 Emacs 时可以使用 =&= 后缀避免阻塞终端界面。

  可以通过变量 =confirm-kill-emacs= 和 =confirm-kill-processes= 来控制关闭 Emacs 时的行为。

* Fundamental Editing Commands
  在 Emacs 中，只有可见字符是可以通过关联的按键直接插入的，其他的按键会绑定相应的命令来进行相关的操作。
  比如按键 =<DEL>= 通过绑定 =delete-backward-char= 命令来删除输入的字符。

  可见字符包括：
  #+begin_example
    0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c
  #+end_example

  PS：其实普通字符的插入也是通过 =self-insert-command= 来完成的。

  一些基础快捷键：
  |-----------+-----------------------------------------------------|
  | 快捷键    | 作用                                                |
  |-----------+-----------------------------------------------------|
  | =C-j=       | 插入换行符，并不进行自动缩进                        |
  | =C-q=       | 转义下一个输入，对应的命令为 =read-quoted-char-radix= |
  | =C-x 8=     | 插入 Unicode 字符                                   |
  | =M-r=       | 将光标在左上，中间，左下之间移动，和 =C-l= 比较像     |
  | =M-g c=     | 将光标移动到第 N 个字符处，感觉没啥用               |
  | =M-g M-g=   | 移动到指定行                                        |
  | =M-g <TAB>= | 将光标移动到当前行的第 N 列                         |
  | =C-o=       | 插入空行                                            |
  | =C-x C-o=   | 移除所有多余的空行                                  |
  | ~M-=~       | 显示行数、单纯数、字符数等信息                      |
  | ~C-x =~     | 显示光标处的字符信息                                |
  | =C-x z=     | 重复上一个命令                                      |
  |-----------+-----------------------------------------------------|

  可以通过 =toggle-truncate-lines= 切换长行的显示模式，也可以通过 =visual-line-mode= 针对长行显示进行优化。

  =Minibuffer= 是 Emacs 中比较特殊的一个输入区域，通常用来读取输入一些复杂的参数，比如文件名、命令名、Lisp 表达式等。

* Important Text-Changing Commands
  默认可以通过 =C-SPC= 和 =C-@= 调用 =set-mark-command= 命令，当然，有些时候 =C-SPC= 快捷键可能被操作系统拦截。

  同时，可以通过 =C-x =C-x= 切换 region 的起始和结束位置，创建一个 region 试一下就明白了。

  也可以在按住 =Shift= 后移动光标快速创建 region，和操作系统中一样。

  |---------+-------------------|
  | 快捷键  | 作用              |
  |---------+-------------------|
  | =M-@=     | mark-word         |
  | =C-M-@=   | mark-sexp         |
  | =M-h=     | mark-paragraph    |
  | =C-M-h=   | mark-defun        |
  | =C-x C-p= | mark-page         |
  | =C-x h=   | mark-whole-buffer |
  |---------+-------------------|

  快捷键 =C-x C-l= 和 =C-x C-u= 可以切换 region 中的大小写情况。

  快捷键 =C-M-\= 调整 region 中的 Indentation。

  mark-ring，在 =set-mark-command= 后，会将 mark 的位置 push 到 mark-ring 中，可以通过 =C-u C-SPC= pop 并跳转到该位置。

  同时，有一个全局的 =global mark ring=, 可以通过 =C-x C-SPC= 进行 pop 操作。

  -----

  删除操作中用的比较少的：
  |-----------------------+--------------------------|
  | M-\                   | 删除光标附近的空白字符   |
  | C-x                   | C-o 删除光标附近的空白行 |
  | delete-duplicate-line | 删除重复行，但保留一个   |
  | C-S-backspace         | 删除整行                 |
  |-----------------------+--------------------------|
