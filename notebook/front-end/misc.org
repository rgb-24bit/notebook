#+TITLE:      Misc

* 目录                                                    :TOC_4_gh:noexport:
- [[#浏览器指纹][浏览器指纹]]
- [[#控制台输出][控制台输出]]
- [[#事件顺序][事件顺序]]
- [[#http-referer][HTTP Referer]]
- [[#401-和-3xx-重定向][401 和 3xx 重定向]]

* 浏览器指纹
  随着互联网络的广泛普及，数以亿计网民的网络行为数据早已成为最宝贵的资源，企业通过五花八门的各种手段了解网民的行为和隐私数据，用于广告投递、用户兴趣分析等，进而作为决策的依据，
  利用 Web 客户端对用户行为进行收集和追踪是重要手段之一。

  Web 客户端追踪，主要是指用户使用客户端（通常是指浏览器）访问 Web 网站时，Web 服务器通过一系列手段对用户客户端进行标记和识别，进而关联和分析用户行为的技术。

  典型的追踪技术是通过 Cookie 进行追踪，但是对于现代浏览器来说，即使关闭了 Cookie 功能，也可以根据浏览器指纹来进行追踪。

  参考：
  + [[https://paper.seebug.org/227/][Web 客户端追踪（上）— Cookie追踪]]
  + [[https://paper.seebug.org/229/][Web 客户端追踪（下）— 浏览器指纹追踪]]
  + [[https://wzyboy.im/post/1130.html][浏览器指纹 | wzyboy’s blog]]

* 控制台输出
  浏览器的控制台可以通过设置样式得到各种各样的输出，比如在控制台输出一个 Badge:
  #+begin_src js
    console.log('%cEnvironment%cproduction','color:#fff;background:#ccc;','color:#fff;background:green');
  #+end_src

  同时，控制台对象拥有更多的方法来控制输出，参考：
  + [[https://developer.mozilla.org/zh-CN/docs/Web/API/Console][Console - Web API 接口参考 | MDN]]

* 事件顺序
  如果一个元素和它的祖先元素注册了同一类型的事件函数，那么当事件发生时事件函数调用的顺序是什么呢？

  过去有两个模型被用来解决这个问题：
  + =Netscape= 的事件捕获(event capturing)模型，认为祖先元素上的处理函数应该先被执行
  + =Microsoft= 的事件冒泡(event bubbling)模型，认为内部元素上的处理函数应该被先执行

  在 W3C 标准中，采取了折中的方案，在 W3C 事件模型中发生的任何事件, 先从其祖先元素开始一路向下捕获，直到达到目标元素，其后再次从目标元素开始冒泡：
  #+begin_example
              1. 先从上往下捕获
                      |
                     | |  / \
    -----------------| |--| |-----------------
    | outer          | |  | |                |
    |   -------------| |--| |-----------     |
    |   |   inner    \ /  | |          |     |
    |   |                  |           |     |
    |   | 2. 到达目标元素后从下往上冒泡|     |
    |   --------------------------------     |
    |        W3C event model                 |
    ------------------------------------------
  #+end_example

  作为开发者，可以决定事件处理器是注册在捕获或者是冒泡阶段。如果 =addEventListener= 的最后一个参数是 true，那么处理函数将在 *捕获阶段* 被触发，
  否则，会在冒泡阶段被触发。

  传统模型将被注册在冒泡阶段：
  #+begin_src js
    element.onclick = function() {}
  #+end_src
  
  也就是说，我们可以在 =body= 上注册事件处理函数，然后捕获所有元素的点击事件。

  参考：
  + [[https://segmentfault.com/a/1190000007623810][JS 中的事件顺序(事件捕获与冒泡) - Yoomin 的前端学习笔记 - SegmentFault 思否]]

* HTTP Referer
  有些网站不允许图片外链，只有自家的网站才能显示图片，外部网站加载图片就会报错。它的实现就是基于 Referer 字段，如果该字段的网址是自家网址，就放行。

  可以通过如下方式选择不发送 Referer：
  #+begin_src html
    <meta name="referrer" content="origin">
  #+end_src

  其中，用户在地址栏输入网址，或者选中浏览器书签，是不会发送 Referer 字段的。

  参考：
  + [[https://segmentfault.com/a/1190000011628835][【前端】解决访问api图片403禁止访问问题 - 前端探秘 - SegmentFault 思否]]
  + [[http://www.ruanyifeng.com/blog/2019/06/http-referer.html][HTTP Referer 教程 - 阮一峰的网络日志]]
  
* 401 和 3xx 重定向
  在实际的开发中，后端返回 401 状态码时，常常还会在 Header 上携带 Location 头，用于告诉客户端到什么地方去登录。

  但这不在 HTTP 协议的标准中，这一行为通常是前后端协定的结果，实际的重定向有前端通过 JS 代码完成。

  而 3xx 的重定向属于 HTTP 标准的一部分，因此，收到 3xx 状态码后，浏览器会自动进行重定向。

  其中：
  + 401 这种自己进行重定向（替换 window.Location）不受跨域的影响，通过类似 redirect_uri 参数的方式，可以到处跳
  + 3xx 这种标准重定向受跨域的影响，通常，默认情况下，AJAX 收到 3xx 状态码后，如果是跨域重定向的话，会失败

