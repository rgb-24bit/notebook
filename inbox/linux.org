* I/O 模型
  + [[https://juejin.im/post/5d84bd1f6fb9a06b2d780df7#heading-12][深入剖析Linux IO原理和几种零拷贝机制的实现 - 掘金]]
  + [[https://juejin.im/post/5dcbefb45188250d194507b7#heading-15][Java I/O体系从原理到应用，这一篇全说清楚了 - 掘金]]
  + [[https://cloud.tencent.com/developer/news/406991][5分钟搞懂Linux中直接I/O原理 - 云+社区 - 腾讯云]]
  + [[https://www.ibm.com/developerworks/cn/linux/l-cn-directio/index.html][Linux 中直接 I/O 机制的介绍]]
  + [[https://www.ibm.com/developerworks/cn/linux/l-memmod/index.html][探索 Linux 内存模型]]
    
** 并发操作
   系统调用好像都是原子性的，默认情况下系统不会的文件的访问加锁，需要手动加锁。

   文件锁是“建议锁”，不是“强制锁”，也就是说，如果一个程序完全无视这个锁，直接打开并读写文件，这个锁不会发挥作用？

   + [[https://stackoverflow.com/questions/2751734/how-do-filesystems-handle-concurrent-read-write][locking - How do filesystems handle concurrent read/write? - Stack Overflow]]
   + [[https://www.vimiix.com/post/51/][TLPI笔记—深入文件 I/O 模型 - Hi, I'm Vimiix]]
   + [[http://shareinto.github.io/2016/12/07/linux-lockfile/][linux中的文件强制锁 | shareinto]]
   + [[https://www.ibm.com/developerworks/cn/linux/l-cn-filelock/index.html][Linux 2.6 中的文件锁]]

* 发行版选择
  + debian
    + ubuntu
      + mint
  + arch
    + manjaro
  + centos
  + [[https://en.wikipedia.org/wiki/List_of_Linux_distributions][List of Linux distributions - Wikipedia]]
  + [[https://juejin.im/post/5d93f518518825092e15ec62][2019 年最好的 Linux 发行版 - 掘金]]

