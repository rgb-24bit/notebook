* Future
** Agent
   本来是想看一下调试中断点是怎么一回事，结果，和 Java Agent 扯上了。

   Java Agent 是一种依附于 JVM 进程的程序，可以通过这种方式来监听控制 JVM 进程。

   加载 Java Agent 的方式主要有两种：
   1. 通过命令行参数指定要加载的 Java Agent 程序，主要的选项为：
      |------------------------------+------------------------------|
      | 选项                         | 作用                         |
      |------------------------------+------------------------------|
      | javaagent:jarpath[=options]  | 加载指定的 jar               |
      | agentlib:libname[=options]   | 加载 PATH 环境变量下的动态库 |
      | agentpath:pathname[=options] | 通过完全路径加载动态库       |
      |------------------------------+------------------------------|

      参考：
      + [[http://www.voidcn.com/article/p-ptghvuzj-bbz.html][6.1 java 选项 -javaagent、-agentlib、-agentpath - 程序园]]
      + 

   2. 通过 Sun 公司提供的 VirtualMachine 接口动态加载 Agent，参考：
      + [[https://www.cnblogs.com/LittleHann/p/4783581.html][Java Attach API - 郑瀚 Andrew.Hann - 博客园]]
      + [[https://docs.oracle.com/javase/8/docs/jdk/api/attach/spec/com/sun/tools/attach/VirtualMachine.html][VirtualMachine (Attach API )]]
     
   其中，Java Agent 程序的编写利用了 java.lang.instrument 包下提供的接口，参考：
   + [[https://www.cnkirito.moe/instrument/][JAVA 拾遗--Instrument 机制 | 徐靖峰|个人博客]]
   + [[https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html][Java SE 6 新特性: Instrumentation 新功能]]

   至于调试：[[https://www.ibm.com/developerworks/cn/java/j-lo-jpda3/index.html][深入 Java 调试体系，第 3 部分: JDWP 协议及实现]]

** 异步
   + [[https://juejin.im/post/5adbf8226fb9a07aac240a67][Java 8 CompletableFuture 教程 - 掘金]]
   + [[https://juejin.im/post/5b4622df5188251ac9766f47#heading-7][异步技巧之CompletableFuture - 掘金]]

** 注解
   + [[https://www.race604.com/annotation-processing/][Java 注解处理器]]
   + [[https://github.com/zhuhean/BuilderProcessor][zhuhean/BuilderProcessor: Android注解处理演示项目]]
   + [[https://github.com/square/javapoet][square/javapoet: A Java API for generating .java source files.]]
   + [[https://www.jetbrains.com/help/idea/configuring-annotation-processing.html#create_profile][Configuring Annotation Processing - Help | IntelliJ IDEA]]

** ConcurrentHashMap
   + [[https://www.cnblogs.com/study-everyday/p/6430462.html][ConcurrentHashMap原理分析（1.7与1.8） - 明志健致远 - 博客园]]
   + [[https://juejin.im/post/5ca89afa5188257e1d4576ff#heading-3][解读Java8中ConcurrentHashMap是如何保证线程安全的 - 掘金]]
   + [[https://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/index.html][探索 ConcurrentHashMap 高并发性的实现机制]]
   + [[https://www.cnblogs.com/aspirant/p/8623864.html][ConcurrentHashMap原理分析（1.7与1.8）]]

** 并发
   Java 中的并发设计不只是可以用于 Java 中，对于运行在操作系统中的并发程序来说，拥有共同的基础工具：
   + 操作系统同步原语，如 Mutex 和 Semaphore
   + 硬件中断/时钟，抢占式和协作式调度
   + Volatile，可见性和避免重排序
   + 硬件同步原语，如 CAS 操作
   + 进程/线程，执行任务
   + 临界资源
   + 临界区
   + ……

   面临着相同的问题：
   + 原子性
   + 有序性
   + 可见性
   + 临界区
   + 死锁
   + ……

   这些是基本的材料，通过这些材料能够做出来什么东西，怎么做，就是并发编程需要考虑的问题。
  
   + WAIT:
     1. ObjectMonitor 源码阅读，它和 Object 之间的关系
     2. ASQ 源码阅读
        #+BEGIN_QUOTE
        This class is designed to be a useful basis for most kinds of synchronizers that rely on a _single atomic int value_ to represent state
        #+END_QUOTE
     3. [[https://www.infoq.cn/article/1ggzj_oFl8wuJFwVG9et][简明高效的 Java 并发编程学习指南 - InfoQ]]

* 编程范式
  + [[https://www.ibm.com/developerworks/cn/java/j-understanding-functional-programming-4/index.html][深入理解 Java 函数式编程，第 4 部分: 使用 Vavr 进行函数式编程]]
  + [[https://www.vavr.io/vavr-docs/][Vavr User Guide]]
  + [[https://www.cnblogs.com/snowinpluto/p/5981400.html][JDK 8 函数式编程入门 - alfred_zhong - 博客园]]
  + [[https://stackoverflow.com/questions/49843262/where-does-the-word-flatmap-originate-from][functional programming - Where does the word "flatMap" originate from? - Stack Overflow]]
  + [[https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html][使用 Reactor 进行反应式编程]]
  + [[https://projectreactor.io/docs/core/release/reference/][Reactor 3 Reference Guide]]
  + [[https://blog.csdn.net/universsky2015/article/details/104894733][什么是反应式编程? 这里有你想要了解的反应式编程 (Reactive programming)_universsky2015的博客-CSDN博客_java反应式编程 node.js]]

  VAVR:
  + Either 表示可能有两种不同类型的值，分别称为左值或右值。只能是其中的一种情况。Either 通常用来表示成功或失败两种情况。惯例是把成功的值作为右值，
    而失败的值作为左值。可以在 Either 上添加应用于左值或右值的计算。应用于右值的计算只有在 Either 包含右值时才生效，对左值也是同理。
    
    Either 的 map 和 mapLeft 方法分别对右值和左值进行计算。
    
    #+begin_src java
      // 构造函数
      Either.left()
      Either.right()

      // 类型判断
      Either.isLeft()
      Either.isRight()

      // 对左值或右值进行处理，得到同一类型 U 的结果
      Either.fold(Function<? super L, ? extends U> leftMapper, Function<? super R, ? extends U> rightMapper)

      // 将函数作用于右值
      Either.map()

      // 将函数作用于左值
      Either.mapLeft()

      // 获取右值或默认值
      Either.getOrElse(other)
    #+end_src
  Reactor:
  + Mono 包含表示 0-1 个元素的流
    
  函数式、反应式、异步、闭包、延迟调用……

  Java 语言的缺陷，这样的代码阅读起来比较麻烦，特别是在不熟悉的情况下

  Reactor 默认是单线程的。如果要异步执行某些操作，则必须通过传递相关调度程序使用 subscribeOn 和 observeOn 运算符明确告知它。

  + [[https://www.codenong.com/42062199/][关于java：反应式编程优点/缺点 | 码农家园]]
    降低了主线程的压力。

